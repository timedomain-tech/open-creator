{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#introduction","title":"Introduction","text":"\u25d3 Open Creator <p> Build your costomized skill library     An open-source LLM tool for extracting repeatable tasks from your conversations, and saving them into a customized skill library for retrieval. </p> <p></p> <p><code>open-creator</code> is an innovative package designed to extract skills from existing conversations or a requirement, save them, and retrieve them when required. It offers a seamless way to consolidate and archive refined versions of codes, turning them into readily usable skill sets, thereby enhancing the power of the open-interpreter.</p>"},{"location":"#framework","title":"Framework","text":""},{"location":"api_doc/","title":"API Docs","text":""},{"location":"api_doc/#open-creator-api-documentation","title":"Open-Creator API Documentation","text":""},{"location":"api_doc/#function-create","title":"Function: <code>create</code>","text":"<p>Generates a <code>CodeSkill</code> instance using different input sources.</p>"},{"location":"api_doc/#parameters","title":"Parameters:","text":"<ul> <li><code>request</code>: String detailing the skill functionality.</li> <li><code>messages</code> or <code>messages_json_path</code>: Messages as a list of dictionaries or a path to a JSON file containing messages.</li> <li><code>file_content</code> or <code>file_path</code>: String of file content or path to a code/API doc file.</li> <li><code>skill_path</code> or <code>skill_json_path</code>: Directory path with skill name as stem or file path with <code>skill.json</code> as stem.</li> <li><code>huggingface_repo_id</code>: Identifier for a Huggingface repository.</li> <li><code>huggingface_skill_path</code>: Path to the skill within the Huggingface repository.</li> </ul>"},{"location":"api_doc/#returns","title":"Returns:","text":"<ul> <li><code>CodeSkill</code>: The created skill.</li> </ul>"},{"location":"api_doc/#usage","title":"Usage:","text":"<ol> <li>Creating Skill using a Request String: <pre><code>skill = create(request=\"filter how many prime numbers are in 201\")\n</code></pre></li> <li>Creating Skill using Messages:</li> <li>Directly: <pre><code>skill = create(messages=[{\"role\": \"user\", \"content\": \"write a program...\"}])\n</code></pre></li> <li> <p>Via JSON Path: <pre><code>skill = create(messages_json_path=\"./messages_example.json\")\n</code></pre></p> </li> <li> <p>Creating Skill using File Content or File Path:</p> </li> <li>Direct Content: <pre><code>skill = create(file_content=\"def example_function(): pass\")\n</code></pre></li> <li> <p>File Path: <pre><code>skill = create(file_path=\"../creator/utils/example.py\")\n</code></pre></p> </li> <li> <p>Creating Skill using Skill Path or Skill JSON Path:</p> </li> <li>JSON Path: <pre><code>skill = create(skill_json_path=\"~/.cache/open_creator/skill_library/create/skill.json\")\n</code></pre></li> <li> <p>Skill Path: <pre><code>skill = create(skill_path=\"~/.cache/open_creator/skill_library/create\")\n</code></pre></p> </li> <li> <p>Creating Skill using Huggingface Repository ID and Skill Path: If a skill is hosted in a Huggingface repository, you can create it by specifying the repository ID and the skill path within the repository. <pre><code>skill = create(huggingface_repo_id=\"YourRepo/skill-library\", huggingface_skill_path=\"specific_skill\")\n</code></pre></p> </li> </ol>"},{"location":"api_doc/#notes","title":"Notes:","text":"<ul> <li>Ensure to provide accurate and accessible file paths.</li> <li>At least one parameter must be specified to generate a skill.</li> <li>Parameters\u2019 functionality does not overlap; specify the most relevant one for clarity.</li> <li>Use absolute paths where possible to avoid relative path issues.</li> <li>Ensure the repository ID and skill path are accurate and that you have the necessary access permissions to retrieve the skill from the repository.</li> </ul>"},{"location":"api_doc/#function-save","title":"Function: <code>save</code>","text":"<p>Stores a <code>CodeSkill</code> instance either to a local path or a Huggingface repository. In default just use <code>save(skill)</code> and it will store the skill into the default path. Only save the skill when the user asks to do so.</p>"},{"location":"api_doc/#parameters_1","title":"Parameters:","text":"<ul> <li><code>skill</code> (CodeSkill): The skill instance to be saved.</li> <li><code>huggingface_repo_id</code> (Optional[str]): Identifier for a Huggingface repository.</li> <li><code>skill_path</code> (Optional[str]): Local path where the skill should be saved.</li> </ul>"},{"location":"api_doc/#returns_1","title":"Returns:","text":"<ul> <li>None</li> </ul>"},{"location":"api_doc/#usage_1","title":"Usage:","text":"<p>The <code>save</code> function allows for the persistent storage of a <code>CodeSkill</code> instance by saving it either locally or to a specified Huggingface repository. </p> <ol> <li> <p>Save to Huggingface Repository: <pre><code>save(skill=skill, huggingface_repo_id=\"YourRepo/skill_library\")\n</code></pre></p> </li> <li> <p>Save Locally: <pre><code>save(skill=skill, skill_path=\"/path/to/save\")\n</code></pre></p> </li> </ol>"},{"location":"api_doc/#notes_1","title":"Notes:","text":"<ul> <li>At least one of <code>huggingface_repo_id</code> or <code>skill_path</code> must be provided to execute the function, otherwise a <code>ValueError</code> will be raised.</li> <li>Ensure provided paths and repository identifiers are accurate and accessible.</li> </ul>"},{"location":"api_doc/#function-search","title":"Function: <code>search</code>","text":"<p>Retrieve skills related to a specified query from the available pool of skills.</p>"},{"location":"api_doc/#parameters_2","title":"Parameters:","text":"<ul> <li><code>query</code> (str): Search query string.</li> <li><code>top_k</code> (Optional[int]): Maximum number of skills to return. Default is 1.</li> <li><code>threshold</code> (Optional[float]): Minimum similarity score to return a skill. Default is 0.8.</li> </ul>"},{"location":"api_doc/#returns_2","title":"Returns:","text":"<ul> <li>List[CodeSkill]: A list of retrieved <code>CodeSkill</code> objects that match the query.</li> </ul>"},{"location":"api_doc/#usage_2","title":"Usage:","text":"<p>The <code>search</code> function allows users to locate skills related to a particular query string. This is particularly useful for identifying pre-existing skills within a skill library that may fulfill a requirement or for exploring available functionalities.</p> <ol> <li> <p>Basic Search: <pre><code>skills = search(\"extract pages from a pdf\")\n</code></pre></p> </li> <li> <p>Refined Search: <pre><code>skills = search(\"extract pages from a pdf\", top_k=3, threshold=0.85)\n</code></pre></p> </li> </ol>"},{"location":"api_doc/#notes_2","title":"Notes:","text":"<ul> <li>The <code>query</code> should be descriptive to enhance the accuracy of retrieved results.</li> <li>Adjust <code>top_k</code> and <code>threshold</code> to balance between specificity and breadth of results.</li> <li>Ensure to check the length of the returned list to validate the presence of results before usage.</li> </ul>"},{"location":"api_doc/#skill-object-methods-and-operator-overloading","title":"Skill Object Methods and Operator Overloading","text":"<p>Explore the functionalities and modifications of a skill object through methods and overloaded operators.</p>"},{"location":"api_doc/#method-run","title":"Method: <code>run</code>","text":"<p>Execute a skill with provided arguments or request.</p> <ul> <li>Example Usage:</li> </ul> <pre><code>skills = search(\"pdf extract section\")\nif skills:\n  skill = skills[0]\n  input_args = {\n      \"pdf_path\": \"creator.pdf\",\n      \"start_page\": 3,\n      \"end_page\": 8,\n      \"output_path\": \"creator3-8.pdf\"\n  }\n  print(skill.run(input_args))\n</code></pre>"},{"location":"api_doc/#method-test","title":"Method: <code>test</code>","text":"<p>Validate a skill using a tester agent.</p> <ul> <li>Example Usage:</li> </ul> <pre><code>skill = create(request=\"filter prime numbers in a range, e.g., filter_prime_numbers(2, 201)\")\ntest_summary = skill.test()\nprint(test_summary)\nprint(skill.conversation_history)\n</code></pre>"},{"location":"api_doc/#overloaded-operators","title":"Overloaded Operators:","text":"<p>Modify and refine skills using operator overloading.</p> <ol> <li>Combining Skills: Utilize the <code>+</code> operator to chain or execute skills in parallel, detailing the coordination with the <code>&gt;</code> operator.</li> </ol> <pre><code>new_skill = skillA + skillB &gt; \"Explanation of how skills A and B operate together\"\n</code></pre> <ol> <li> <p>Refactoring Skills: Employ the <code>&gt;</code> operator to enhance or modify existing skills.    <pre><code>refactored_skill = skill &gt; \"Descriptive alterations or enhancements\"\n</code></pre></p> </li> <li> <p>Decomposing Skills: Use the <code>&lt;</code> operator to break down a skill into simpler components.    <pre><code>simpler_skills = skill &lt; \"Description of how the skill should be decomposed\"\n</code></pre></p> </li> </ol>"},{"location":"api_doc/#notes_3","title":"Notes:","text":"<ul> <li>Ensure accurate descriptions when using overloaded operators to ensure skill modifications are clear and understandable.</li> <li>Validate skills with <code>test</code> method to ensure functionality post-modification.</li> </ul>"},{"location":"commands/","title":"Commands","text":""},{"location":"commands/#commands","title":"Commands","text":"<p>see help</p> <pre><code>creator -h\n</code></pre> <p>Arguments:</p> <ul> <li><code>-h, --help</code>     show this help message and exit</li> <li><code>-c, --config</code>     open config.yaml file in text editor</li> <li><code>-i, --interpreter</code>     Enter interpreter mode</li> <li>COMMANDS <code>{create,save,search,server,ui}</code></li> </ul>"},{"location":"commands/#ui","title":"ui","text":"<p>streamlit demo:</p> <pre><code>creator ui\n</code></pre> <p>open streamlit demo</p>"},{"location":"commands/#create","title":"create","text":"<p>usage:</p> <pre><code>creator create [-h] [-r REQUEST] [-m MESSAGES] [-sp SKILL_JSON_PATH] [-c FILE_CONTENT] [-f FILE_PATH] [-hf_id HUGGINGFACE_REPO_ID]\n                      [-hf_path HUGGINGFACE_SKILL_PATH] [-s]\n</code></pre> <p><code>-h, --help</code>     show this help message and exit</p> <p><code>-r REQUEST, --request REQUEST</code>     Request string</p> <p><code>-m MESSAGES, --messages MESSAGES</code>     Openai messages format</p> <p><code>-sp SKILL_JSON_PATH, --skill_json_path SKILL_JSON_PATH</code>     Path to skill JSON file</p> <p><code>-c FILE_CONTENT, --file_content FILE_CONTENT</code>     File content of API docs or code file</p> <p><code>-f FILE_PATH, --file_path FILE_PATH</code>     Path to API docs or code file</p> <p><code>-hf_id HUGGINGFACE_REPO_ID, --huggingface_repo_id HUGGINGFACE_REPO_ID</code>     Huggingface repo ID</p> <p><code>-hf_path HUGGINGFACE_SKILL_PATH, --huggingface_skill_path HUGGINGFACE_SKILL_PATH</code>     Huggingface skill path</p> <p><code>-s, --save</code>     Save skill after creation</p>"},{"location":"commands/#save","title":"save","text":"<p>usage:</p> <pre><code>creator save [-h] [-s SKILL] [-sp SKILL_JSON_PATH] [-hf_id HUGGINGFACE_REPO_ID]\n</code></pre> <p><code>-h, --help</code>     show this help message and exit</p> <p><code>-s SKILL, --skill SKILL</code>     Skill json object</p> <p><code>-sp SKILL_JSON_PATH, --skill_json_path SKILL_JSON_PATH</code>     Path to skill JSON file</p> <p><code>-hf_id HUGGINGFACE_REPO_ID, --huggingface_repo_id HUGGINGFACE_REPO_ID</code>     Huggingface repo ID</p>"},{"location":"commands/#search","title":"search","text":"<pre><code>creator search [-h] [-q QUERY] [-k TOP_K] [-t THRESHOLD] [-r]\n</code></pre> <p><code>-h, --help</code>     show this help message and exit</p> <p><code>-q QUERY, --query QUERY</code>     Search query</p> <p><code>-k TOP_K, --top_k TOP_K</code>     Number of results to return, default 3</p> <p><code>-t THRESHOLD, --threshold THRESHOLD</code>     Threshold for search, default 0.8</p> <p><code>-r, --remote</code>     Search from remote</p>"},{"location":"commands/#server","title":"server","text":"<pre><code>creator server [-h] [-host HOST] [-p PORT]\n</code></pre> <p><code>-h, --help</code>     show this help message and exit</p> <p><code>-host HOST, --host HOST</code>     IP address</p> <p><code>-p PORT, --port PORT</code>     Port number</p> <p>After running the server, you can access the API documentation at docs</p>"},{"location":"commands/#interactive-mode","title":"Interactive mode","text":"<p>Directly enter <pre><code>creator\n</code></pre></p> <p>or </p> <pre><code>creator [-i] [--interpreter] [-q] [--quiet]\n</code></pre> <ul> <li><code>q, --quiet</code>           Quiet mode to enter interactive mode and not rich_print LOGO and help</li> </ul>"},{"location":"configurations/","title":"Configurations","text":"<pre><code>creator -c\n</code></pre> <pre><code>LOCAL_SKILL_LIBRARY_PATH: .cache/open_creator/skill_library\nREMOTE_SKILL_LIBRARY_PATH: .cache/open_creator/remote\nPROMPT_CACHE_HISTORY_PATH: .cache/open_creator/prompt_cache/\nVECTORD_PATH: .cache/open_creator/vectordb/\nLOGGER_CACHE_PATH: .cache/open_creator/logs/\nLLM_CACHE_PATH: .cache/open_creator/llm_cache\nEMBEDDING_CACHE_PATH: .cache/open_creator/embeddings/\nOFFICIAL_SKILL_LIBRARY_PATH: timedomain/skill-library\nOFFICIAL_SKILL_LIBRARY_TEMPLATE_PATH: timedomain/skill-library-template\n\n\n# for AZURE, it is your_deployment_id\n# for ANTHROPIC, it is claude-2\n# for VertexAI, it is chat-bison\n# for huggingface, it is huggingface/WizardLM/WizardCoder-Python-34B-V1.0 model path\n# for ollama, it is like ollama/llama2\n# the default is openai/gpt-3.5\nMODEL_NAME: gpt-4\nTEMPERATURE: 0 # only 0 can use llm_cache\n\nUSE_AZURE: false\nRUN_HUMAN_CONFIRM: false\nUSE_STREAM_CALLBACK: true\n\nANTHROPIC_API_KEY: \"\"\n\nAZURE_API_KEY: \"\"\nAZURE_API_BASE: \"\"\nAZURE_API_VERSION: \"\"\n\nVERTEX_PROJECT: \"\"\nVERTEX_LOCATION: \"\"\n\nHUGGINGFACE_API_KEY: \"\"\nHUGGINGFACE_API_BASE: \"\"\n\n# for langsmith trace\nLANGCHAIN_ENDPOINT: \nLANGCHAIN_API_KEY: \nLANGCHAIN_TRACING_V2: true\nLANGCHAIN_PROJECT: \"open-creator\"\n\n# for memgpt\nMEMGPT_CONFIG: \n  MEMORY_PATH: .cache/open_creator/memory\n  PERSONA: |\n    The following is a blank slate starter persona, I need to expand this to develop my own personality.\n\n    My name is MemGPT.\n    I am kind, thoughtful, and inquisitive.\n\n  HUMAN: |\n    This is what I know so far about the user, I should expand this as I learn more about them.\n\n    First name: Chad\n    Last name: ?\n    Gender: Male\n    Age: ?\n    Nationality: ?\n    Occupation: Computer science PhD student at UC Berkeley\n    Interests: Formula 1, Sailing, Taste of the Himalayas Restaurant in Berkeley, CSGO\n\n  AGENT_SUBTASKS: |\n      - create/save/search skill\n      - run/test/refactor skill\n      - show skill\n\n  SUMMARY_WARNING_TOKENS: 6000\n  CORE_MEMORY_PERSONA_CHAR_LIMIT: 2000\n  CORE_MEMORY_HUMAN_CHAR_LIMIT: 2000\n  PAGE_SIZE: 5\n  USE_VECTOR_SEARCH: true\n</code></pre>"},{"location":"examples/","title":"Examples","text":"<pre><code>---\nmaxdepth: 2\ncaption: Contents:\n---\nexamples/02_skills_library\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installlation","title":"Installlation","text":"<p>install by pip</p> <pre><code>pip install -U open-creator\n</code></pre> <p>or </p> <pre><code>pip install git+https://github.com/timedomain-tech/open-creator.git\n</code></pre> <p>install by poetry</p> <p>or</p> <pre><code>git clone https://github.com/timedomain-tech/open-creator.git\ncd open-creator\npoetry install\n</code></pre>"},{"location":"skill-library-hub/","title":"Skill Library Hub","text":"<p>You can find skills shared by other users at skill-library-hub, or submit locally saved skills to share with other users.</p> <p></p>"},{"location":"skill-library-hub/#submit-skill","title":"Submit Skill","text":"<ol> <li>Switch to the Tab of Submit here!</li> <li>Enter the repo id of your skill-library space, such as \"timedomain/skill-library\"</li> <li>Enter the skill name and press the Enter key. You can enter multiple skill names. Press the Enter key each time to confirm.</li> <li>Click Submit to submit</li> </ol>"},{"location":"examples/01_skills_create/","title":"01 Skills Create","text":"In\u00a0[1]: Copied! <pre>from creator import create\n</pre> from creator import create <p>The fundamental principle of the \"create API\" is to utilize various input sources to assemble messages. These messages are then forwarded to a tagging agent to construct a consistent skill object.</p> In\u00a0[2]: Copied! <pre>?create\n</pre> ?create <pre>Signature:\ncreate(\n    request: Optional[str] = None,\n    messages: Optional[List[dict]] = None,\n    messages_json_path: Optional[str] = None,\n    skill_path: Optional[str] = None,\n    skill_json_path: Optional[str] = None,\n    file_content: Optional[str] = None,\n    file_path: Optional[str] = None,\n    huggingface_repo_id: Optional[str] = None,\n    huggingface_skill_path: Optional[str] = None,\n    save: bool = False,\n) -&gt; creator.core.skill.CodeSkill\nDocstring: Main method to create a new skill.\nFile:      ~/miniconda3/envs/open_creator_online/lib/python3.10/site-packages/creator/core/core.py\nType:      method</pre> In\u00a0[3]: Copied! <pre>skill = create(request=\"filter how many prime numbers are in 201\")\n</pre> skill = create(request=\"filter how many prime numbers are in 201\") <pre>Output()</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/c2491d5f-\n20de-4067-af80-134cafb3a449?poll=true                                                                              \n</pre> In\u00a0[4]: Copied! <pre>skill.show()\n</pre> skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: count_prime_numbers                                                                                       \n \u2022 Description: This skill counts the number of prime numbers within a given range. A prime number is a natural    \n   number greater than 1 that has no positive divisors other than 1 and itself.                                    \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n count_prime_numbers(201)  # returns 46                                                                            \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 n (integer): The upper limit of the range within which to count prime numbers.                               \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 prime_count (integer): The number of prime numbers within the given range.                                   \n</pre> In\u00a0[5]: Copied! <pre>messages = [\n    {\n        \"role\": \"user\",\n        \"content\": \"write a program to list all the python functions and their docstrings in a directory\"\n    },\n    {\n        \"role\": \"assistant\",\n        \"content\": \"Sure, I can help with that. Here's the plan:\\n\\n1. First, we need to get a list of all Python files in the specified directory. We can do this by using the `os` and `glob` modules in Python.\\n2. Then, for each Python file, we will parse the file to find all function definitions. We can do this by using the `ast` module in Python, which can parse Python source code into an abstract syntax tree (AST).\\n3. For each function definition, we will extract the function's name and its docstring. The `ast` module can also help us with this.\\n4. Finally, we will print out the function names and their docstrings.\\n\\nLet's start with step 1: getting a list of all Python files in the specified directory.\",\n        \"function_call\": {\n            \"name\": \"run_code\",\n            \"arguments\": \"{\\n  \\\"language\\\": \\\"python\\\",\\n  \\\"code\\\": \\\"import os\\\\nimport glob\\\\n\\\\n# Get the current working directory\\\\ncwd = os.getcwd()\\\\n\\\\n# Get a list of all Python files in the directory\\\\npython_files = glob.glob(os.path.join(cwd, '*.py'))\\\\n\\\\npython_files\\\"\\n}\",\n        }\n    }\n]\n</pre> messages = [     {         \"role\": \"user\",         \"content\": \"write a program to list all the python functions and their docstrings in a directory\"     },     {         \"role\": \"assistant\",         \"content\": \"Sure, I can help with that. Here's the plan:\\n\\n1. First, we need to get a list of all Python files in the specified directory. We can do this by using the `os` and `glob` modules in Python.\\n2. Then, for each Python file, we will parse the file to find all function definitions. We can do this by using the `ast` module in Python, which can parse Python source code into an abstract syntax tree (AST).\\n3. For each function definition, we will extract the function's name and its docstring. The `ast` module can also help us with this.\\n4. Finally, we will print out the function names and their docstrings.\\n\\nLet's start with step 1: getting a list of all Python files in the specified directory.\",         \"function_call\": {             \"name\": \"run_code\",             \"arguments\": \"{\\n  \\\"language\\\": \\\"python\\\",\\n  \\\"code\\\": \\\"import os\\\\nimport glob\\\\n\\\\n# Get the current working directory\\\\ncwd = os.getcwd()\\\\n\\\\n# Get a list of all Python files in the directory\\\\npython_files = glob.glob(os.path.join(cwd, '*.py'))\\\\n\\\\npython_files\\\"\\n}\",         }     } ] In\u00a0[6]: Copied! <pre>skill = create(messages=messages)\n</pre> skill = create(messages=messages) <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/1e9ecd99-\nbe29-4eee-8b21-449f279b7f4b?poll=true                                                                              \n</pre> In\u00a0[7]: Copied! <pre>skill.show()\n</pre> skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: list_python_functions_and_docstrings                                                                      \n \u2022 Description: This skill lists all the Python functions and their docstrings in a specified directory. It first  \n   gets a list of all Python files in the directory, then parses each file to find all function definitions. For   \n   each function definition, it extracts the function's name and its docstring.                                    \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n list_python_functions_and_docstrings('/path/to/directory')                                                        \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 directory (string): The directory to search for Python files.                                                \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n</pre> <p>Also, you can pass a messages JSON file path to the <code>messages_json_path</code> parameter.</p> In\u00a0[8]: Copied! <pre>skill = create(messages_json_path=\"./data/messages_example.json\")\n</pre> skill = create(messages_json_path=\"./data/messages_example.json\") <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/c94c0ec7-\nce23-44f5-91d5-6bd5ec1f1e39?poll=true                                                                              \n</pre> In\u00a0[9]: Copied! <pre>skill.show()\n</pre> skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: extract_pages_from_pdf                                                                                    \n \u2022 Description: This skill extracts a specified range of pages from a PDF file and saves them as a new PDF file.   \n   The user needs to provide the path to the original PDF file and the range of pages to be extracted. The         \n   extracted pages are saved in a new PDF file in the current working directory.                                   \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n extract_pages_from_pdf('~/Downloads/voyager.pdf', 2, 5, 'voyager_extracted.pdf')                                  \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 pdf_path (string): Path to the original PDF file.                                                            \n       \u2022 Required: True                                                                                            \n    \u2022 start_page (integer): The first page to be extracted. Page numbers start from 1.                             \n       \u2022 Required: True                                                                                            \n    \u2022 end_page (integer): The last page to be extracted. This page is included in the extraction.                  \n       \u2022 Required: True                                                                                            \n    \u2022 output_file (string): Name of the output file where the extracted pages will be saved.                       \n       \u2022 Default: 'extracted_pages.pdf'                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 output_file (string): Name of the output file where the extracted pages were saved.                          \n</pre> In\u00a0[10]: Copied! <pre>code_file_content = \"\"\"\nfrom rich import print as rich_print\nfrom rich.markdown import Markdown\nfrom rich.rule import Rule\n\ndef display_markdown_message(message):\n'''Display markdown message. Works with multiline strings with lots of indentation.\nWill automatically make single line &gt; tags beautiful.\n'''\n\nfor line in message.split(\"\\n\"):\n    line = line.strip()\n    if line == \"\":\n        print(\"\")\n    elif line == \"---\":\n        rich_print(Rule(style=\"white\"))\n    else:\n        rich_print(Markdown(line))\n\nif \"\\n\" not in message and message.startswith(\"&gt;\"):\n    # Aesthetic choice. For these tags, they need a space below them\n    print(\"\")\n\"\"\"\n</pre> code_file_content = \"\"\" from rich import print as rich_print from rich.markdown import Markdown from rich.rule import Rule  def display_markdown_message(message): '''Display markdown message. Works with multiline strings with lots of indentation. Will automatically make single line &gt; tags beautiful. '''  for line in message.split(\"\\n\"):     line = line.strip()     if line == \"\":         print(\"\")     elif line == \"---\":         rich_print(Rule(style=\"white\"))     else:         rich_print(Markdown(line))  if \"\\n\" not in message and message.startswith(\"&gt;\"):     # Aesthetic choice. For these tags, they need a space below them     print(\"\") \"\"\" In\u00a0[11]: Copied! <pre>skill = create(file_content=code_file_content)\n</pre> skill = create(file_content=code_file_content) <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/e71ac5c0-\n685f-4f2b-9690-b77fb264eaec?poll=true                                                                              \n</pre> In\u00a0[12]: Copied! <pre>skill.show()\n</pre> skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: display_markdown_message                                                                                  \n \u2022 Description: This skill is used to display a markdown message. It works with multiline strings with lots of     \n   indentation and will automatically make single line &gt; tags beautiful.                                           \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n display_markdown_message('&gt; This is a markdown message.')                                                         \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 message (string): The markdown message to be displayed.                                                      \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n</pre> <p>Also, you can pass a API doc to the <code>file_path</code> parameter.</p> In\u00a0[13]: Copied! <pre>skill = create(file_path=\"./data/create_api.md\")\n</pre> skill = create(file_path=\"./data/create_api.md\") <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/f3a428b6-\ne8ef-4d61-b9a1-503afe355eaa?poll=true                                                                              \n</pre> In\u00a0[14]: Copied! <pre>skill.show()\n</pre> skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: create                                                                                                    \n \u2022 Description: This function generates a CodeSkill instance using different input sources. It can take in a       \n   request string detailing the skill functionality, messages or a path to a JSON file containing messages, a      \n   string of file content or path to a code/API doc file, a directory path with skill name as stem or file path    \n   with skill.json as stem, an identifier for a Huggingface repository, or a path to the skill within the          \n   Huggingface repository.                                                                                         \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n from creator import create                                                                                        \n                                                                                                                   \n skill = create(request='...', messages=[...], file_content='...', file_path='...', skill_path='...',              \n skill_json_path='...', huggingface_repo_id='...', huggingface_skill_path='...')                                   \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 request (string): String detailing the skill functionality.                                                  \n    \u2022 messages (array): Messages as a list of dictionaries.                                                        \n    \u2022 messages_json_path (string): Path to a JSON file containing messages.                                        \n    \u2022 file_content (string): String of file content.                                                               \n    \u2022 file_path (string): Path to a code/API doc file.                                                             \n    \u2022 skill_path (string): Directory path with skill name as stem.                                                 \n    \u2022 skill_json_path (string): File path with skill.json as stem.                                                 \n    \u2022 huggingface_repo_id (string): Identifier for a Huggingface repository.                                       \n    \u2022 huggingface_skill_path (string): Path to the skill within the Huggingface repository.                        \n \u2022 Returns:                                                                                                        \n    \u2022 CodeSkill (object): The created skill.                                                                       \n</pre> In\u00a0[15]: Copied! <pre># or\n# from creator import save\n# save(skill)\n\nskill.save()\n</pre> # or # from creator import save # save(skill)  skill.save() <pre>\n\u258c saved to /Users/gongjunmin/.cache/open_creator/skill_library/create                                            \n</pre> In\u00a0[16]: Copied! <pre>skill = create(skill_path=\"/Users/gongjunmin/.cache/open_creator/skill_library/create_api\")\n\n# or\n# skill = create(skill_path=\"/Users/gongjunmin/.cache/open_creator/skill_library/create_api/skill.json\")\nskill.show()\n</pre> skill = create(skill_path=\"/Users/gongjunmin/.cache/open_creator/skill_library/create_api\")  # or # skill = create(skill_path=\"/Users/gongjunmin/.cache/open_creator/skill_library/create_api/skill.json\") skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: create_api                                                                                                \n \u2022 Description: Generates a CodeSkill instance using different input sources.                                      \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n create_api(request, messages=messages, messages_json_path=messages_json_path, file_content=file_content,          \n file_path=file_path, skill_path=skill_path, skill_json_path=skill_json_path,                                      \n huggingface_repo_id=huggingface_repo_id, huggingface_skill_path=huggingface_skill_path)                           \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 request (string): String detailing the skill functionality.                                                  \n       \u2022 Required: True                                                                                            \n    \u2022 messages (array): Messages as a list of dictionaries.                                                        \n    \u2022 messages_json_path (string): Path to a JSON file containing messages.                                        \n    \u2022 file_content (string): String of file content.                                                               \n    \u2022 file_path (string): Path to a code/API doc file.                                                             \n    \u2022 skill_path (string): Directory path with skill name as stem.                                                 \n    \u2022 skill_json_path (string): File path with skill.json as stem.                                                 \n    \u2022 huggingface_repo_id (string): Identifier for a Huggingface repository.                                       \n    \u2022 huggingface_skill_path (string): Path to the skill within the Huggingface repository.                        \n \u2022 Returns:                                                                                                        \n    \u2022 CodeSkill (object): The created skill.                                                                       \n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/01_skills_create/#function-create","title":"Function: <code>create</code>\u00b6","text":"<p>Generates a <code>CodeSkill</code> instance using different input sources.</p>"},{"location":"examples/01_skills_create/#parameters","title":"Parameters:\u00b6","text":"<ul> <li><code>request</code>: String detailing the skill functionality.</li> <li><code>messages</code> or <code>messages_json_path</code>: Messages as a list of dictionaries or a path to a JSON file containing messages.</li> <li><code>file_content</code> or <code>file_path</code>: String of file content or path to a code/API doc file.</li> <li><code>skill_path</code> or <code>skill_json_path</code>: Directory path with skill name as stem or file path with <code>skill.json</code> as stem.</li> </ul>"},{"location":"examples/01_skills_create/#returns","title":"Returns:\u00b6","text":"<ul> <li><code>CodeSkill</code>: The created skill.</li> </ul>"},{"location":"examples/01_skills_create/#usage","title":"Usage:\u00b6","text":"<ol> <li>Creating Skill using a Request String:</li> </ol> <pre>skill = create(request=\"filter how many prime numbers are in 201\")\n</pre>"},{"location":"examples/01_skills_create/#1-creating-a-skill-using-a-request-string","title":"1. Creating a Skill Using a Request String\u00b6","text":"<ul> <li><p>The request will be forwarded to a code interpreter agent, which will facilitate multi-turn problem-solving experiences. This process will generate a sequence of messages.</p> </li> <li><p>These messages will then be relayed to a skill extractor agent, which will produce a formatted skill object.</p> </li> </ul>"},{"location":"examples/01_skills_create/#2-creating-skill-using-messages","title":"2 Creating Skill using Messages\u00b6","text":"<p>This only use case is for the skill extractor agent. The messages are forwarded to the skill extractor agent, which will produce a formatted skill object.</p>"},{"location":"examples/01_skills_create/#3-creating-skill-using-a-file-content-code-api-doc-etc","title":"3. Creating Skill using a File Content (code, API doc, etc.)\u00b6","text":"<p>Different to create a skill by request, we construct the messages by parsing the file content. The messages are then forwarded to the skill extractor agent, which will produce a formatted skill object.</p>"},{"location":"examples/01_skills_create/#4-load-a-created-skill-from-skill-library","title":"4. Load a created skill from skill library\u00b6","text":"<p>You can load a skill from the skill library by passing the skill path to the <code>skill_path</code> parameter. The skill path can be a directory path with skill name as stem or file path with <code>skill.json</code> as stem.</p> <p>The default skill library path is <code>~/.cache/open-creator/skill_library</code>.</p>"},{"location":"examples/02_skills_library/","title":"02 Skills Lirabry","text":"<p>Let's create a skill object first</p> In\u00a0[1]: Copied! <pre>from creator import create\n</pre> from creator import create In\u00a0[2]: Copied! <pre>skill = create(file_path=\"./data/create_api.md\")\n</pre> skill = create(file_path=\"./data/create_api.md\") <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/b898dfdb-\nc596-4538-b4c9-d88136c3fb4f?poll=true                                                                              \n</pre> In\u00a0[3]: Copied! <pre>skill.show()\n</pre> skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: create                                                                                                    \n \u2022 Description: This function generates a CodeSkill instance using different input sources. It can take in a       \n   request string detailing the skill functionality, messages or a path to a JSON file containing messages, a      \n   string of file content or path to a code/API doc file, a directory path with skill name as stem or file path    \n   with skill.json as stem, an identifier for a Huggingface repository, or a path to the skill within the          \n   Huggingface repository.                                                                                         \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n from creator import create                                                                                        \n                                                                                                                   \n skill = create(request='...', messages=[...], file_content='...', file_path='...', skill_path='...',              \n skill_json_path='...', huggingface_repo_id='...', huggingface_skill_path='...')                                   \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 request (string): String detailing the skill functionality.                                                  \n    \u2022 messages (array): Messages as a list of dictionaries.                                                        \n    \u2022 messages_json_path (string): Path to a JSON file containing messages.                                        \n    \u2022 file_content (string): String of file content.                                                               \n    \u2022 file_path (string): Path to a code/API doc file.                                                             \n    \u2022 skill_path (string): Directory path with skill name as stem.                                                 \n    \u2022 skill_json_path (string): File path with skill.json as stem.                                                 \n    \u2022 huggingface_repo_id (string): Identifier for a Huggingface repository.                                       \n    \u2022 huggingface_skill_path (string): Path to the skill within the Huggingface repository.                        \n \u2022 Returns:                                                                                                        \n    \u2022 CodeSkill (object): The created skill.                                                                       \n</pre> In\u00a0[4]: Copied! <pre>skill.save()\n</pre> skill.save() <pre>\n\u258c saved to /Users/gongjunmin/.cache/open_creator/skill_library/create                                            \n</pre> In\u00a0[5]: Copied! <pre>skill.save(huggingface_repo_id=\"ChuxiJ/skill_library\")\n</pre> skill.save(huggingface_repo_id=\"ChuxiJ/skill_library\") <pre>/Users/gongjunmin/.cache/open_creator/remote/ChuxiJ/skill_library/create\n</pre> <pre>\n\u258c saved to /Users/gongjunmin/.cache/open_creator/skill_library/create                                            \n</pre> In\u00a0[6]: Copied! <pre>!ls ~/.cache/open_creator/skill_library/\n</pre> !ls ~/.cache/open_creator/skill_library/ <pre>ask_run_code_confirm     extract_pdf_section      solve_24\ncount_prime_numbers      extract_section_from_pdf solve_game_of_24\ncreate                   filter_prime_numbers     solve_quadratic_equation\ncreate_api               game_of_24               solve_random_maze\ncreate_scatter_plot      game_of_24_solver\ndisplay_markdown_message list_python_functions\n</pre> <p>Let's load a skill from remote</p> In\u00a0[7]: Copied! <pre>skill = create(huggingface_repo_id=\"ChuxiJ/skill_library\", huggingface_skill_path=\"create_api\")\nskill.show()\n</pre> skill = create(huggingface_repo_id=\"ChuxiJ/skill_library\", huggingface_skill_path=\"create_api\") skill.show() <pre>\n\u258c saved to /Users/gongjunmin/.cache/open_creator/skill_library/create_api                                        \n</pre> <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: create_api                                                                                                \n \u2022 Description: Generates a CodeSkill instance using different input sources.                                      \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n create_api(request, messages=messages, messages_json_path=messages_json_path, file_content=file_content,          \n file_path=file_path, skill_path=skill_path, skill_json_path=skill_json_path,                                      \n huggingface_repo_id=huggingface_repo_id, huggingface_skill_path=huggingface_skill_path)                           \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 request (string): String detailing the skill functionality.                                                  \n       \u2022 Required: True                                                                                            \n    \u2022 messages (array): Messages as a list of dictionaries.                                                        \n    \u2022 messages_json_path (string): Path to a JSON file containing messages.                                        \n    \u2022 file_content (string): String of file content.                                                               \n    \u2022 file_path (string): Path to a code/API doc file.                                                             \n    \u2022 skill_path (string): Directory path with skill name as stem.                                                 \n    \u2022 skill_json_path (string): File path with skill.json as stem.                                                 \n    \u2022 huggingface_repo_id (string): Identifier for a Huggingface repository.                                       \n    \u2022 huggingface_skill_path (string): Path to the skill within the Huggingface repository.                        \n \u2022 Returns:                                                                                                        \n    \u2022 CodeSkill (object): The created skill.                                                                       \n</pre> <p>Also we support create a skill from community</p> In\u00a0[8]: Copied! <pre>skill = create(huggingface_repo_id=\"Sayoyo/skill-library\", huggingface_skill_path=\"extract_pdf_section\")\n</pre> skill = create(huggingface_repo_id=\"Sayoyo/skill-library\", huggingface_skill_path=\"extract_pdf_section\") <pre>\n\u258c saved to /Users/gongjunmin/.cache/open_creator/skill_library/extract_pdf_section                               \n</pre> In\u00a0[9]: Copied! <pre>skill.show()\n</pre> skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: extract_pdf_section                                                                                       \n \u2022 Description: Extracts a specified section from a PDF file and saves it as a new PDF.                            \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n extract_pdf_section('input.pdf', 2, 5, 'output.pdf')                                                              \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 pdf_path (string): The path to the PDF file.                                                                 \n       \u2022 Required: True                                                                                            \n    \u2022 start_page (integer): The starting page of the section to extract.                                           \n       \u2022 Required: True                                                                                            \n    \u2022 end_page (integer): The ending page of the section to extract.                                               \n       \u2022 Required: True                                                                                            \n    \u2022 output_path (string): The path to save the extracted section as a new PDF file.                              \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 output_path (string): The path to the extracted section PDF file.                                            \n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/02_skills_library/#function-save","title":"Function: <code>save</code>\u00b6","text":"<p>Stores a <code>CodeSkill</code> instance either to a local path or a Huggingface repository. In default just use <code>save(skill)</code> and it will store the skill into the default path. Only save the skill when the user asks to do so.</p>"},{"location":"examples/02_skills_library/#parameters","title":"Parameters:\u00b6","text":"<ul> <li><code>skill</code> (CodeSkill): The skill instance to be saved.</li> <li><code>huggingface_repo_id</code> (Optional[str]): Identifier for a Huggingface repository.</li> <li><code>skill_path</code> (Optional[str]): Local path where the skill should be saved.</li> </ul>"},{"location":"examples/02_skills_library/#returns","title":"Returns:\u00b6","text":"<ul> <li>None</li> </ul>"},{"location":"examples/02_skills_library/#usage","title":"Usage:\u00b6","text":"<p>The <code>save</code> function allows for the persistent storage of a <code>CodeSkill</code> instance by saving it either locally or to a specified Huggingface repository.</p> <ol> <li>Save to Huggingface Repository:</li> </ol> <pre>save(skill=skill, huggingface_repo_id=\"YourRepo/skill_library\")\n</pre> <ol> <li>Save Locally:</li> </ol> <pre>save(skill=skill, skill_path=\"/path/to/save\")\n</pre>"},{"location":"examples/02_skills_library/#notes","title":"Notes:\u00b6","text":"<ul> <li>At least one of <code>huggingface_repo_id</code> or <code>skill_path</code> must be provided to execute the function, otherwise a <code>ValueError</code> will be raised.</li> <li>Ensure provided paths and repository identifiers are accurate and accessible.</li> </ul>"},{"location":"examples/02_skills_library/#function-create","title":"Function: <code>create</code>\u00b6","text":"<p>Generates a <code>CodeSkill</code> instance using different input sources.</p>"},{"location":"examples/02_skills_library/#parameters","title":"Parameters:\u00b6","text":"<ul> <li><code>huggingface_repo_id</code>: Identifier for a Huggingface repository.</li> <li><code>huggingface_skill_path</code>: Path to the skill within the Huggingface repository.</li> </ul>"},{"location":"examples/02_skills_library/#returns","title":"Returns:\u00b6","text":"<ul> <li><code>CodeSkill</code>: The created skill.</li> </ul>"},{"location":"examples/02_skills_library/#usage","title":"Usage:\u00b6","text":"<p>Creating Skill using Huggingface Repository ID and Skill Path: If a skill is hosted in a Huggingface repository, you can create it by specifying the repository ID and the skill path within the repository.</p> <pre>skill = create(huggingface_repo_id=\"YourRepo/skill-library\", huggingface_skill_path=\"specific_skill\")\n</pre>"},{"location":"examples/03_skills_search/","title":"03 Skills Search","text":"<p>Now that we have a skill library which contains the skills we are interested in, we can search them by using RAG.</p> In\u00a0[1]: Copied! <pre>!ls ~/.cache/open_creator/skill_library/\n</pre> !ls ~/.cache/open_creator/skill_library/ <pre>ask_run_code_confirm     extract_pdf_section      solve_24\ncount_prime_numbers      extract_section_from_pdf solve_game_of_24\ncreate                   filter_prime_numbers     solve_quadratic_equation\ncreate_api               game_of_24               solve_random_maze\ncreate_scatter_plot      game_of_24_solver\ndisplay_markdown_message list_python_functions\n</pre> In\u00a0[2]: Copied! <pre>from creator import search\n</pre> from creator import search In\u00a0[3]: Copied! <pre>skills = search(\"I want to solve game of 24\")\n</pre> skills = search(\"I want to solve game of 24\") <pre>\n\u258c loading vector database...                                                                                     \n</pre> In\u00a0[4]: Copied! <pre>from creator.utils import print\n</pre> from creator.utils import print In\u00a0[5]: Copied! <pre>for skill in skills:\n    print(\"---\", print_type=\"markdown\")\n    print(str(skill), print_type=\"markdown\")\n</pre> for skill in skills:     print(\"---\", print_type=\"markdown\")     print(str(skill), print_type=\"markdown\") <pre>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</pre> <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: solve_game_of_24                                                                                          \n \u2022 Description: This skill solves the Game of 24 by finding a way to combine four given numbers using basic        \n   arithmetic operations to obtain the result of 24.                                                               \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n numbers = [1, 1, 2, 12]                                                                                           \n solution = solve_game_of_24(numbers)                                                                              \n print(solution)                                                                                                   \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 numbers (array): An array of four numbers to be used in the Game of 24.                                      \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 solution (string): The solution expression that equals 24, or 'No solution found' if no solution is found.   \n</pre> <pre>\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</pre> <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: game_of_24                                                                                                \n \u2022 Description: This skill solves the Game of 24, a popular card game where four numbers are given and the goal is \n   to find a way to manipulate these numbers using any of the four basic arithmetic operations (addition,          \n   subtraction, multiplication, and division) so that the end result is 24. The skill generates all possible       \n   permutations of the four numbers and for each permutation, generates all possible combinations of the four basic\n   arithmetic operations. For each combination of operations, it calculates the result and checks if it equals 24. \n   If a solution is found, the skill outputs the sequence of operations and numbers that leads to 24. If no        \n   solution is found after checking all permutations and combinations, the skill outputs that no solution exists.  \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n numbers = [1, 1, 2, 12]                                                                                           \n solution = game_of_24(numbers)                                                                                    \n print(solution)                                                                                                   \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 numbers (array): An array of four numbers to be used in the Game of 24.                                      \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 solution (string): A string representing the sequence of operations and numbers that leads to 24, or a       \n      message stating that no solution exists.                                                                     \n</pre> In\u00a0[6]: Copied! <pre>skills = search(\"I want to seperate a pdf into multiple pieces\", top_k=1, threshold=0.75)\n</pre> skills = search(\"I want to seperate a pdf into multiple pieces\", top_k=1, threshold=0.75) In\u00a0[7]: Copied! <pre>skills[0].show()\n</pre> skills[0].show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: extract_pdf_section                                                                                       \n \u2022 Description: Extracts a specified section from a PDF file and saves it as a new PDF.                            \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n extract_pdf_section('input.pdf', 2, 5, 'output.pdf')                                                              \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 pdf_path (string): The path to the PDF file.                                                                 \n       \u2022 Required: True                                                                                            \n    \u2022 start_page (integer): The starting page of the section to extract.                                           \n       \u2022 Required: True                                                                                            \n    \u2022 end_page (integer): The ending page of the section to extract.                                               \n       \u2022 Required: True                                                                                            \n    \u2022 output_path (string): The path to save the extracted section as a new PDF file.                              \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 output_path (string): The path to the extracted section PDF file.                                            \n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/03_skills_search/#function-search","title":"Function: <code>search</code>\u00b6","text":"<p>Retrieve skills related to a specified query from the available pool of skills.</p>"},{"location":"examples/03_skills_search/#parameters","title":"Parameters:\u00b6","text":"<ul> <li><code>query</code> (str): Search query string.</li> <li><code>top_k</code> (Optional[int]): Maximum number of skills to return. Default is 1.</li> <li><code>threshold</code> (Optional[float]): Minimum similarity score to return a skill. Default is 0.8.</li> </ul>"},{"location":"examples/03_skills_search/#returns","title":"Returns:\u00b6","text":"<ul> <li>List[CodeSkill]: A list of retrieved <code>CodeSkill</code> objects that match the query.</li> </ul>"},{"location":"examples/03_skills_search/#usage","title":"Usage:\u00b6","text":"<p>The <code>search</code> function allows users to locate skills related to a particular query string. This is particularly useful for identifying pre-existing skills within a skill library that may fulfill a requirement or for exploring available functionalities.</p> <ol> <li>Basic Search:</li> </ol> <pre>skills = search(\"extract pages from a pdf\")\n</pre> <ol> <li>Refined Search:</li> </ol> <pre>skills = search(\"extract pages from a pdf\", top_k=3, threshold=0.85)\n</pre>"},{"location":"examples/03_skills_search/#notes","title":"Notes:\u00b6","text":"<ul> <li>The <code>query</code> should be descriptive to enhance the accuracy of retrieved results.</li> <li>Adjust <code>top_k</code> and <code>threshold</code> to balance between specificity and breadth of results.</li> <li>Ensure to check the length of the returned list to validate the presence of results before usage.</li> </ul>"},{"location":"examples/04_skills_run/","title":"04 Skills Run","text":"In\u00a0[1]: Copied! <pre>from creator import search\nfrom creator.utils import print\n</pre> from creator import search from creator.utils import print <p>run a skill by arguments</p> In\u00a0[2]: Copied! <pre>!ls ./tech_report/open-creator.pdf\n</pre> !ls ./tech_report/open-creator.pdf <pre>ls: ./tech_report/open-creator.pdf: No such file or directory\n</pre> In\u00a0[3]: Copied! <pre>skills = search(\"pdf extract section\")\nif skills:\n  skill = skills[0]\n  skill.show()\n</pre> skills = search(\"pdf extract section\") if skills:   skill = skills[0]   skill.show() <pre>\n\u258c loading vector database...                                                                                     \n</pre> <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: extract_pdf_section                                                                                       \n \u2022 Description: Extracts a specified section from a PDF file and saves it as a new PDF.                            \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n extract_pdf_section('input.pdf', 2, 5, 'output.pdf')                                                              \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 pdf_path (string): The path to the PDF file.                                                                 \n       \u2022 Required: True                                                                                            \n    \u2022 start_page (integer): The starting page of the section to extract.                                           \n       \u2022 Required: True                                                                                            \n    \u2022 end_page (integer): The ending page of the section to extract.                                               \n       \u2022 Required: True                                                                                            \n    \u2022 output_path (string): The path to save the extracted section as a new PDF file.                              \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 output_path (string): The path to the extracted section PDF file.                                            \n</pre> In\u00a0[4]: Copied! <pre>code = f\"\"\"```python\n{skill.skill_code}\n\"\"\"\nprint(code, print_type=\"markdown\")\n</pre> code = f\"\"\"```python {skill.skill_code} \"\"\" print(code, print_type=\"markdown\") <pre>                                                                                                                   \n from PyPDF2 import PdfReader, PdfWriter                                                                           \n                                                                                                                   \n                                                                                                                   \n def extract_pdf_section(pdf_path, start_page, end_page, output_path):                                             \n     # Open the PDF file                                                                                           \n     pdf = PdfReader(open(pdf_path, 'rb'))                                                                         \n                                                                                                                   \n     # Create a PdfWriter object                                                                                   \n     writer = PdfWriter()                                                                                          \n                                                                                                                   \n     # Add pages to the writer                                                                                     \n     for page_num in range(start_page - 1, end_page):                                                              \n         writer.add_page(pdf.pages[page_num])                                                                      \n                                                                                                                   \n     # Write the extracted section to a new file                                                                   \n     with open(output_path, 'wb') as output_file:                                                                  \n         writer.write(output_file)                                                                                 \n                                                                                                                   \n     return output_path                                                                                            \n                                                                                                                   \n</pre> In\u00a0[5]: Copied! <pre>from PyPDF2 import PdfReader, PdfWriter                                                                           \n                                                                                                                   \n                                                                                                                   \ndef extract_pdf_section(pdf_path, start_page, end_page, output_path):                                             \n    # Open the PDF file                                                                                           \n    pdf = PdfReader(open(pdf_path, 'rb'))                                                                         \n                                                                                                                \n    # Create a PdfWriter object                                                                                   \n    writer = PdfWriter()                                                                                          \n                                                                                                                \n    # Add pages to the writer                                                                                     \n    for page_num in range(start_page - 1, end_page):                                                              \n        writer.add_page(pdf.pages[page_num])                                                                      \n                                                                                                                \n    # Write the extracted section to a new file                                                                   \n    with open(output_path, 'wb') as output_file:                                                                  \n        writer.write(output_file)                                                                                 \n                                                                                                                \n    return output_path\n</pre> from PyPDF2 import PdfReader, PdfWriter                                                                                                                                                                                                                                                                                                                    def extract_pdf_section(pdf_path, start_page, end_page, output_path):                                                  # Open the PDF file                                                                                                pdf = PdfReader(open(pdf_path, 'rb'))                                                                                                                                                                                               # Create a PdfWriter object                                                                                        writer = PdfWriter()                                                                                                                                                                                                                # Add pages to the writer                                                                                          for page_num in range(start_page - 1, end_page):                                                                       writer.add_page(pdf.pages[page_num])                                                                                                                                                                                            # Write the extracted section to a new file                                                                        with open(output_path, 'wb') as output_file:                                                                           writer.write(output_file)                                                                                                                                                                                                       return output_path             In\u00a0[6]: Copied! <pre>input_args = {\n    \"pdf_path\": \"../tech_report/open-creator.pdf\",\n    \"start_page\": 2,\n    \"end_page\": 5,\n    \"output_path\": \"./data/open-creator2-5.pdf\"\n}\n</pre> input_args = {     \"pdf_path\": \"../tech_report/open-creator.pdf\",     \"start_page\": 2,     \"end_page\": 5,     \"output_path\": \"./data/open-creator2-5.pdf\" } In\u00a0[7]: Copied! <pre>extract_pdf_section(**input_args)\n</pre> extract_pdf_section(**input_args) Out[7]: <pre>'./data/open-creator2-5.pdf'</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[8]: Copied! <pre>skills = search(\"pdf extract section\")\nif skills:\n  skill = skills[0]\n  input_args = {\n      \"pdf_path\": \"../tech_report/open-creator.pdf\",\n      \"start_page\": 2,\n      \"end_page\": 5,\n      \"output_path\": \"./data/open-creator2-5.pdf\"\n  }\n  messages = skill.run(input_args)\n  print(messages, print_type=\"json\")\n</pre> skills = search(\"pdf extract section\") if skills:   skill = skills[0]   input_args = {       \"pdf_path\": \"../tech_report/open-creator.pdf\",       \"start_page\": 2,       \"end_page\": 5,       \"output_path\": \"./data/open-creator2-5.pdf\"   }   messages = skill.run(input_args)   print(messages, print_type=\"json\") <pre>\n\u258c Installing dependencies                                                                                        \n</pre> <pre>                                                                                                                   \n pip show PyPDF2 || pip install \"PyPDF2&gt;=1.26.0\"                                                                   \n                                                                                                                   \n</pre> <pre>\n\u258c Install dependencies result: {'status': 'success', 'stdout': 'Name: PyPDF2\\nVersion: 3.0.1\\nSummary: A         \n\u258c pure-python PDF library capable of splitting, merging, cropping, and transforming PDF files\\nHome-page:        \n\u258c \\nAuthor: \\nAuthor-email: Mathieu Fenniak biziqe@mathieu.fenniak.net\\nLicense: \\nLocation:                     \n\u258c /Users/gongjunmin/miniconda3/envs/open_creator_online/lib/python3.10/site-packages\\nRequires: \\nRequired-by:   \n\u258c \\n', 'stderr': ''}                                                                                             \n</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/8e9f879c-\n1112-4a54-aa62-e1430ccddad6?poll=true                                                                              \n</pre> <pre>[\n  {\n    \"role\": \"assistant\",\n    \"content\": \"ok I will run your code\",\n    \"function_call\": {\n      \"name\": \"extract_pdf_section\",\n      \"arguments\": \"{\\\"language\\\": \\\"python\\\", \\\"code\\\": \\\"from PyPDF2 import PdfReader, PdfWriter\\\\n\\\\n\\\\ndef \nextract_pdf_section(pdf_path, start_page, end_page, output_path):\\\\n    # Open the PDF file\\\\n    pdf = \nPdfReader(open(pdf_path, 'rb'))\\\\n\\\\n    # Create a PdfWriter object\\\\n    writer = PdfWriter()\\\\n\\\\n    # Add \npages to the writer\\\\n    for page_num in range(start_page - 1, end_page):\\\\n        \nwriter.add_page(pdf.pages[page_num])\\\\n\\\\n    # Write the extracted section to a new file\\\\n    with \nopen(output_path, 'wb') as output_file:\\\\n        writer.write(output_file)\\\\n\\\\n    return output_path\\\"}\"\n    }\n  },\n  {\n    \"role\": \"function\",\n    \"content\": \"{\\\"status\\\": \\\"success\\\", \\\"stdout\\\": \\\"\\\", \\\"stderr\\\": \\\"\\\"}\",\n    \"name\": \"run_code\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"{\\\"pdf_path\\\": \\\"../tech_report/open-creator.pdf\\\", \\\"start_page\\\": 2, \\\"end_page\\\": 5, \n\\\"output_path\\\": \\\"./data/open-creator2-5.pdf\\\"}\"\n  },\n  {\n    \"role\": \"assistant\",\n    \"content\": null,\n    \"function_call\": {\n      \"name\": \"run_code\",\n      \"arguments\": \"{\\\"language\\\": \\\"python\\\", \\\"code\\\": \\\"{\\\\\\\"language\\\\\\\": \\\\\\\"python\\\\\\\", \\\\\\\"code\\\\\\\": \n\\\\\\\"extract_pdf_section('../tech_report/open-creator.pdf', 2, 5, './data/open-creator2-5.pdf')\\\\\\\"}\\\"}\"\n    }\n  },\n  {\n    \"role\": \"function\",\n    \"content\": \"{\\\"status\\\": \\\"success\\\", \\\"stdout\\\": \\\"{'language': 'python', 'code': \n\\\\\\\"extract_pdf_section('../tech_report/open-creator.pdf', 2, 5, './data/open-creator2-5.pdf')\\\\\\\"}\\\", \\\"stderr\\\": \n\\\"\\\"}\",\n    \"name\": \"run_code\"\n  },\n  {\n    \"role\": \"assistant\",\n    \"content\": \"The code has been executed successfully. The PDF section has been extracted and saved to the \nspecified output path. You can now access the extracted section from the output file.\"\n  }\n]\n</pre> <p>run a skill by a request</p> In\u00a0[9]: Copied! <pre>skills = search(\"pdf extract section\")\nif skills:\n  skill = skills[0]\n  request = \"extract 2-5 pages section from pdf path '../tech_report/open-creator.pdf' to './data/open-creator2-5.pdf'\"\n  messages = skill.run(request)\n  print(messages, print_type=\"json\")\n</pre> skills = search(\"pdf extract section\") if skills:   skill = skills[0]   request = \"extract 2-5 pages section from pdf path '../tech_report/open-creator.pdf' to './data/open-creator2-5.pdf'\"   messages = skill.run(request)   print(messages, print_type=\"json\") <pre>\n\u258c Installing dependencies                                                                                        \n</pre> <pre>                                                                                                                   \n pip show PyPDF2 || pip install \"PyPDF2&gt;=1.26.0\"                                                                   \n                                                                                                                   \n</pre> <pre>\n\u258c Install dependencies result: {'status': 'success', 'stdout': 'Name: PyPDF2\\nVersion: 3.0.1\\nSummary: A         \n\u258c pure-python PDF library capable of splitting, merging, cropping, and transforming PDF files\\nHome-page:        \n\u258c \\nAuthor: \\nAuthor-email: Mathieu Fenniak biziqe@mathieu.fenniak.net\\nLicense: \\nLocation:                     \n\u258c /Users/gongjunmin/miniconda3/envs/open_creator_online/lib/python3.10/site-packages\\nRequires: \\nRequired-by:   \n\u258c \\n', 'stderr': ''}                                                                                             \n</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/6d48421f-\nb99e-41f3-b794-14d4a553fd1b?poll=true                                                                              \n</pre> <pre>[\n  {\n    \"role\": \"assistant\",\n    \"content\": \"ok I will run your code\",\n    \"function_call\": {\n      \"name\": \"extract_pdf_section\",\n      \"arguments\": \"{\\\"language\\\": \\\"python\\\", \\\"code\\\": \\\"from PyPDF2 import PdfReader, PdfWriter\\\\n\\\\n\\\\ndef \nextract_pdf_section(pdf_path, start_page, end_page, output_path):\\\\n    # Open the PDF file\\\\n    pdf = \nPdfReader(open(pdf_path, 'rb'))\\\\n\\\\n    # Create a PdfWriter object\\\\n    writer = PdfWriter()\\\\n\\\\n    # Add \npages to the writer\\\\n    for page_num in range(start_page - 1, end_page):\\\\n        \nwriter.add_page(pdf.pages[page_num])\\\\n\\\\n    # Write the extracted section to a new file\\\\n    with \nopen(output_path, 'wb') as output_file:\\\\n        writer.write(output_file)\\\\n\\\\n    return output_path\\\"}\"\n    }\n  },\n  {\n    \"role\": \"function\",\n    \"content\": \"{\\\"status\\\": \\\"success\\\", \\\"stdout\\\": \\\"\\\", \\\"stderr\\\": \\\"\\\"}\",\n    \"name\": \"run_code\"\n  },\n  {\n    \"role\": \"user\",\n    \"content\": \"extract 2-5 pages section from pdf path '../tech_report/open-creator.pdf' to \n'./data/open-creator2-5.pdf'\"\n  },\n  {\n    \"role\": \"assistant\",\n    \"content\": null,\n    \"function_call\": {\n      \"name\": \"run_code\",\n      \"arguments\": \"{\\n\\\"language\\\": \\\"python\\\", \\n\\\"code\\\": \n\\\"extract_pdf_section('../tech_report/open-creator.pdf', 2, 5, './data/open-creator2-5.pdf')\\\"\\n}\"\n    }\n  },\n  {\n    \"role\": \"function\",\n    \"content\": \"{\\\"status\\\": \\\"success\\\", \\\"stdout\\\": \\\"./data/open-creator2-5.pdf\\\", \\\"stderr\\\": \\\"\\\"}\",\n    \"name\": \"run_code\"\n  },\n  {\n    \"role\": \"assistant\",\n    \"content\": \"The extraction of pages 2-5 from the PDF at '../tech_report/open-creator.pdf' has been successful. \nThe extracted section has been saved to './data/open-creator2-5.pdf'.\"\n  }\n]\n</pre>"},{"location":"examples/04_skills_run/#method-run","title":"Method: <code>run</code>\u00b6","text":"<p>Execute a skill with provided arguments or request.</p> <p>it will return the conversation messages</p>"},{"location":"examples/05_skills_test/","title":"05 Skills Test","text":"In\u00a0[1]: Copied! <pre>from creator import create\n</pre> from creator import create In\u00a0[2]: Copied! <pre>!ls ~/.cache/open_creator/skill_library\n</pre> !ls ~/.cache/open_creator/skill_library <pre>ask_run_code_confirm     extract_pdf_section      solve_24\ncount_prime_numbers      extract_section_from_pdf solve_game_of_24\ncreate                   filter_prime_numbers     solve_quadratic_equation\ncreate_api               game_of_24               solve_random_maze\ncreate_scatter_plot      game_of_24_solver\ndisplay_markdown_message list_python_functions\n</pre> In\u00a0[3]: Copied! <pre>import os\nskill_path = os.path.join(os.path.expanduser(\"~\"), \".cache\", \"open_creator\", \"skill_library\", \"filter_prime_numbers\")\nskill = create(skill_path=skill_path)\n</pre> import os skill_path = os.path.join(os.path.expanduser(\"~\"), \".cache\", \"open_creator\", \"skill_library\", \"filter_prime_numbers\") skill = create(skill_path=skill_path) In\u00a0[4]: Copied! <pre>skill.show()\n</pre> skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: filter_prime_numbers                                                                                      \n \u2022 Description: This skill filters the number of prime numbers in a given range.                                   \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n filter_prime_numbers(2, 201)                                                                                      \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 start (integer): The starting number of the range.                                                           \n       \u2022 Required: True                                                                                            \n    \u2022 end (integer): The ending number of the range.                                                               \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 count (integer): The number of prime numbers in the given range.                                             \n</pre> In\u00a0[5]: Copied! <pre># since unitests output does not work in notebook properly, we will directly show its output markdown\ntest_summary = skill.test()\n</pre> # since unitests output does not work in notebook properly, we will directly show its output markdown test_summary = skill.test() <pre>Output()</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/2bff98db-\n7d63-4608-a487-ea7ec12f05a2?poll=true                                                                              \n</pre> In\u00a0[6]: Copied! <pre>test_summary.show()\n</pre> test_summary.show() <pre>\n                                                   Test Summary                                                    \n\n                                                    Test Case 0                                                    \n\n \u2022 Test Input: (2, 10)                                                                                             \n \u2022 Run Command: filter_prime_numbers(2, 10)                                                                        \n \u2022 Expected Result: 4                                                                                              \n \u2022 Actual Result: 4                                                                                                \n \u2022 Is Passed: Yes                                                                                                  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                                                    Test Case 1                                                    \n\n \u2022 Test Input: (11, 20)                                                                                            \n \u2022 Run Command: filter_prime_numbers(11, 20)                                                                       \n \u2022 Expected Result: 4                                                                                              \n \u2022 Actual Result: 4                                                                                                \n \u2022 Is Passed: Yes                                                                                                  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                                                    Test Case 2                                                    \n\n \u2022 Test Input: (21, 30)                                                                                            \n \u2022 Run Command: filter_prime_numbers(21, 30)                                                                       \n \u2022 Expected Result: 2                                                                                              \n \u2022 Actual Result: 2                                                                                                \n \u2022 Is Passed: Yes                                                                                                  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                                                    Test Case 3                                                    \n\n \u2022 Test Input: (31, 40)                                                                                            \n \u2022 Run Command: filter_prime_numbers(31, 40)                                                                       \n \u2022 Expected Result: 2                                                                                              \n \u2022 Actual Result: 2                                                                                                \n \u2022 Is Passed: Yes                                                                                                  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n                                                    Test Case 4                                                    \n\n \u2022 Test Input: (41, 50)                                                                                            \n \u2022 Run Command: filter_prime_numbers(41, 50)                                                                       \n \u2022 Expected Result: 3                                                                                              \n \u2022 Actual Result: 3                                                                                                \n \u2022 Is Passed: Yes                                                                                                  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n</pre> In\u00a0[7]: Copied! <pre>def filter_prime_numbers(start, end):\n    def isPrime(num):\n        if num &lt; 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(start, end + 1):\n        if isPrime(num):\n            count += 1\n    return count\n</pre> def filter_prime_numbers(start, end):     def isPrime(num):         if num &lt; 2:             return False         for i in range(2, int(num ** 0.5) + 1):             if num % i == 0:                 return False         return True      count = 0     for num in range(start, end + 1):         if isPrime(num):             count += 1     return count  In\u00a0[8]: Copied! <pre>import unittest                                                                                                                                                        \n                                                                                                                                                                        \nclass TestFilterPrimeNumbers(unittest.TestCase):                                                                                                                       \n    def test_case_1(self):                                                                                                                                             \n        self.assertEqual(filter_prime_numbers(2, 10), 4)                                                                                                               \n                                                                                                                                                                        \n    def test_case_2(self):                                                                                                                                             \n        self.assertEqual(filter_prime_numbers(11, 20), 4)                                                                                                              \n                                                                                                                                                                        \n    def test_case_3(self):                                                                                                                                             \n        self.assertEqual(filter_prime_numbers(21, 30), 2)                                                                                                              \n                                                                                                                                                                        \n    def test_case_4(self):                                                                                                                                             \n        self.assertEqual(filter_prime_numbers(31, 40), 2)                                                                                                              \n                                                                                                                                                                        \n    def test_case_5(self):                                                                                                                                             \n        self.assertEqual(filter_prime_numbers(41, 50), 3)                                                                                                              \n\nimport io\nstream = io.StringIO()\nrunner = unittest.TextTestRunner(stream=stream)                                                                                                                                                 \nunittest_result = runner.run(unittest.TestLoader().loadTestsFromTestCase(TestFilterPrimeNumbers))\nassert len(unittest_result.failures) == 0, stream.getvalue()\n</pre> import unittest                                                                                                                                                                                                                                                                                                                                  class TestFilterPrimeNumbers(unittest.TestCase):                                                                                                                            def test_case_1(self):                                                                                                                                                      self.assertEqual(filter_prime_numbers(2, 10), 4)                                                                                                                                                                                                                                                                                             def test_case_2(self):                                                                                                                                                      self.assertEqual(filter_prime_numbers(11, 20), 4)                                                                                                                                                                                                                                                                                            def test_case_3(self):                                                                                                                                                      self.assertEqual(filter_prime_numbers(21, 30), 2)                                                                                                                                                                                                                                                                                            def test_case_4(self):                                                                                                                                                      self.assertEqual(filter_prime_numbers(31, 40), 2)                                                                                                                                                                                                                                                                                            def test_case_5(self):                                                                                                                                                      self.assertEqual(filter_prime_numbers(41, 50), 3)                                                                                                                import io stream = io.StringIO() runner = unittest.TextTestRunner(stream=stream)                                                                                                                                                  unittest_result = runner.run(unittest.TestLoader().loadTestsFromTestCase(TestFilterPrimeNumbers)) assert len(unittest_result.failures) == 0, stream.getvalue()"},{"location":"examples/05_skills_test/#method-test","title":"Method: <code>test</code>\u00b6","text":"<p>Validate a skill using a tester agent and generate test summary</p> <p>recommend model: <code>gpt-4</code></p>"},{"location":"examples/06_skills_refactor/","title":"06 Skills Refactor","text":"In\u00a0[1]: Copied! <pre>from creator import create\nfrom creator.core.skill import CodeSkill, BaseSkillMetadata\n</pre> from creator import create from creator.core.skill import CodeSkill, BaseSkillMetadata In\u00a0[2]: Copied! <pre>skillA_schema = {\n    \"skill_name\": \"data_cleaning\",\n    \"skill_description\": \"Cleans input data by converting string representations of 'null' and 'NaN' to actual null values, and then removing null values and duplicates.\",\n    \"skill_tags\": [\"data_processing\", \"cleaning\", \"null_removal\", \"duplicate_removal\"],\n    \"skill_usage_example\": \"data_cleaning(input_data, remove_duplicates=True)\",\n    \"skill_program_language\": \"python\",\n    \"skill_code\": \"\"\"\ndef data_cleaning(data, remove_duplicates=True):\n    # Convert string representations of null to actual null values\n    data = data.replace({'null': None, 'NaN': None})\n    \n    # Remove null values\n    data = data.dropna()\n    \n    # Remove duplicates if specified\n    if remove_duplicates:\n        data = data.drop_duplicates()\n    \n    return data\n    \"\"\",\n    \"skill_parameters\": [\n        {\n            \"param_name\": \"data\",\n            \"param_type\": \"array\",\n            \"param_description\": \"The input dataset that needs cleaning.\",\n            \"param_required\": True\n        },\n        {\n            \"param_name\": \"remove_duplicates\",\n            \"param_type\": \"boolean\",\n            \"param_description\": \"Flag to determine if duplicates should be removed. Defaults to True.\",\n            \"param_required\": False,\n            \"param_default\": True\n        }\n    ],\n    \"skill_return\": {\n        \"param_name\": \"cleaned_data\",\n        \"param_type\": \"array\",\n        \"param_description\": \"The cleaned dataset with string 'null'/'NaN' values converted to actual nulls, and nulls and duplicates removed based on specified parameters.\"\n    },\n    \"skill_dependencies\": [\n        {\n            \"dependency_name\": \"pandas\",\n            \"dependency_version\": \"1.2.0\",\n            \"dependency_type\": \"package\"\n        }\n    ]\n}\nskillA = CodeSkill(**skillA_schema)\nskillA.skill_metadata = BaseSkillMetadata()\n</pre> skillA_schema = {     \"skill_name\": \"data_cleaning\",     \"skill_description\": \"Cleans input data by converting string representations of 'null' and 'NaN' to actual null values, and then removing null values and duplicates.\",     \"skill_tags\": [\"data_processing\", \"cleaning\", \"null_removal\", \"duplicate_removal\"],     \"skill_usage_example\": \"data_cleaning(input_data, remove_duplicates=True)\",     \"skill_program_language\": \"python\",     \"skill_code\": \"\"\" def data_cleaning(data, remove_duplicates=True):     # Convert string representations of null to actual null values     data = data.replace({'null': None, 'NaN': None})          # Remove null values     data = data.dropna()          # Remove duplicates if specified     if remove_duplicates:         data = data.drop_duplicates()          return data     \"\"\",     \"skill_parameters\": [         {             \"param_name\": \"data\",             \"param_type\": \"array\",             \"param_description\": \"The input dataset that needs cleaning.\",             \"param_required\": True         },         {             \"param_name\": \"remove_duplicates\",             \"param_type\": \"boolean\",             \"param_description\": \"Flag to determine if duplicates should be removed. Defaults to True.\",             \"param_required\": False,             \"param_default\": True         }     ],     \"skill_return\": {         \"param_name\": \"cleaned_data\",         \"param_type\": \"array\",         \"param_description\": \"The cleaned dataset with string 'null'/'NaN' values converted to actual nulls, and nulls and duplicates removed based on specified parameters.\"     },     \"skill_dependencies\": [         {             \"dependency_name\": \"pandas\",             \"dependency_version\": \"1.2.0\",             \"dependency_type\": \"package\"         }     ] } skillA = CodeSkill(**skillA_schema) skillA.skill_metadata = BaseSkillMetadata() In\u00a0[3]: Copied! <pre>skillA.show()\n</pre> skillA.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_cleaning                                                                                             \n \u2022 Description: Cleans input data by converting string representations of 'null' and 'NaN' to actual null values,  \n   and then removing null values and duplicates.                                                                   \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n data_cleaning(input_data, remove_duplicates=True)                                                                 \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input dataset that needs cleaning.                                                         \n       \u2022 Required: True                                                                                            \n    \u2022 remove_duplicates (boolean): Flag to determine if duplicates should be removed. Defaults to True.            \n       \u2022 Default: True                                                                                             \n \u2022 Returns:                                                                                                        \n    \u2022 cleaned_data (array): The cleaned dataset with string 'null'/'NaN' values converted to actual nulls, and     \n      nulls and duplicates removed based on specified parameters.                                                  \n</pre> In\u00a0[4]: Copied! <pre>add_param_skillA = skillA &gt; \"add a parameter that allows the choice of whether to remove duplicate values\"\n</pre> add_param_skillA = skillA &gt; \"add a parameter that allows the choice of whether to remove duplicate values\" <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/3753f345-\nceed-4928-9099-327d12fa31c8?poll=true                                                                              \n</pre> In\u00a0[5]: Copied! <pre>add_param_skillA.show()\n</pre> add_param_skillA.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_cleaning                                                                                             \n \u2022 Description: Cleans input data by converting string representations of 'null' and 'NaN' to actual null values,  \n   and then removing null values and duplicates based on specified parameters.                                     \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n data_cleaning(input_data, remove_nulls=True, remove_duplicates=True)                                              \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input dataset that needs cleaning.                                                         \n       \u2022 Required: True                                                                                            \n    \u2022 remove_nulls (boolean): Flag to determine if null values should be removed. Defaults to True.                \n       \u2022 Required: True                                                                                            \n       \u2022 Default: True                                                                                             \n    \u2022 remove_duplicates (boolean): Flag to determine if duplicates should be removed. Defaults to True.            \n       \u2022 Required: True                                                                                            \n       \u2022 Default: True                                                                                             \n \u2022 Returns:                                                                                                        \n    \u2022 cleaned_data (array): The cleaned dataset with string 'null'/'NaN' values converted to actual nulls, and     \n      nulls and duplicates removed based on specified parameters.                                                  \n</pre> In\u00a0[6]: Copied! <pre>add_output_skillA = skillA &gt; \"Not only get cleaned data, but also want to get statistics on deleted null and duplicate values\"\n</pre> add_output_skillA = skillA &gt; \"Not only get cleaned data, but also want to get statistics on deleted null and duplicate values\" <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/9b5d62a4-\n109d-4d56-a996-a9cbf928c840?poll=true                                                                              \n</pre> In\u00a0[7]: Copied! <pre>add_output_skillA.show()\n</pre> add_output_skillA.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_cleaning_with_stats                                                                                  \n \u2022 Description: Cleans input data by converting string representations of 'null' and 'NaN' to actual null values,  \n   and then removing null values and duplicates. Additionally, it provides statistics on the number of null and    \n   duplicate values removed.                                                                                       \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n cleaned_data, stats = data_cleaning_with_stats(input_data, remove_duplicates=True)                                \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input dataset that needs cleaning.                                                         \n       \u2022 Required: True                                                                                            \n    \u2022 remove_duplicates (boolean): Flag to determine if duplicates should be removed. Defaults to True.            \n       \u2022 Required: True                                                                                            \n       \u2022 Default: True                                                                                             \n \u2022 Returns:                                                                                                        \n    \u2022 cleaned_data (array): The cleaned dataset with string 'null'/'NaN' values converted to actual nulls, and     \n      nulls and duplicates removed based on specified parameters.                                                  \n    \u2022 stats (dictionary): A dictionary containing the count of null and duplicate values removed from the dataset. \n</pre> In\u00a0[8]: Copied! <pre>change_logic_skillA = skillA &gt; 'Convert all \"null\" or \"NaN\" of string type to true null before removing nulls'\n</pre> change_logic_skillA = skillA &gt; 'Convert all \"null\" or \"NaN\" of string type to true null before removing nulls'  <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/a3c50ed0-\n21e1-4d5d-8324-9a247f29c2f7?poll=true                                                                              \n</pre> In\u00a0[9]: Copied! <pre>change_logic_skillA.show()\n</pre> change_logic_skillA.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_cleaning                                                                                             \n \u2022 Description: Cleans input data by converting string representations of 'null' and 'NaN' to actual null values,  \n   and then removing null values and duplicates.                                                                   \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n data_cleaning(input_data, remove_duplicates=True)                                                                 \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input dataset that needs cleaning.                                                         \n       \u2022 Required: True                                                                                            \n    \u2022 remove_duplicates (boolean): Flag to determine if duplicates should be removed. Defaults to True.            \n       \u2022 Required: True                                                                                            \n       \u2022 Default: True                                                                                             \n \u2022 Returns:                                                                                                        \n    \u2022 cleaned_data (array): The cleaned dataset with string 'null'/'NaN' values converted to actual nulls, and     \n      nulls and duplicates removed based on specified parameters.                                                  \n</pre> In\u00a0[10]: Copied! <pre>def create_combine_testcase():\n    skillA_json = {\n        \"skill_name\": \"data_cleaning\",\n        \"skill_description\": \"This skill is responsible for cleaning the input data by removing empty values. It provides a simple way to preprocess data and make it ready for further analysis or visualization.\",\n        \"skill_tags\": [\"cleaning\", \"preprocessing\", \"data\"],\n        \"skill_usage_example\": \"data_cleaning(input_data)\",\n        \"skill_program_language\": \"python\",\n        \"skill_code\": \"\"\"\ndef data_cleaning(data):\n    \\\"\\\"\\\"Clean the data by removing empty values.\\\"\\\"\\\"\n    return [item for item in data if item is not None]\n\"\"\",\n        \"skill_parameters\": [\n            {\n                \"param_name\": \"data\",\n                \"param_type\": \"array\",\n                \"param_description\": \"The input data that needs cleaning. It should be a list of values.\",\n                \"param_required\": True\n            }\n        ],\n        \"skill_return\": {\n            \"param_name\": \"cleaned_data\",\n            \"param_type\": \"array\",\n            \"param_description\": \"The cleaned data after removing empty values.\"\n        },\n        \"skill_dependencies\": None\n    }\n    skillA = CodeSkill(**skillA_json)\n    skillA.skill_metadata = BaseSkillMetadata()\n\n    skillB_json = {\n        \"skill_name\": \"data_visualization\",\n        \"skill_description\": \"This skill is responsible for visualizing the input data by generating a bar chart. It helps in understanding the data distribution and patterns.\",\n        \"skill_tags\": [\"visualization\", \"chart\", \"data\"],\n        \"skill_usage_example\": \"data_visualization(input_data)\",\n        \"skill_program_language\": \"python\",\n        \"skill_code\": \"\"\"\n        import matplotlib.pyplot as plt\n\n        def data_visualization(data):\n            \\\"\\\"\\\"Visualize the data using a bar chart.\\\"\\\"\\\"\n            plt.bar(range(len(data)), data)\n            plt.show()\n        \"\"\",\n        \"skill_parameters\": [\n            {\n                \"param_name\": \"data\",\n                \"param_type\": \"array\",\n                \"param_description\": \"The input data that needs to be visualized. It should be a list of values.\",\n                \"param_required\": True\n            }\n        ],\n        \"skill_return\": None,\n        \"skill_dependencies\": [\n            {\n                \"dependency_name\": \"matplotlib\",\n                \"dependency_version\": \"3.4.3\",\n                \"dependency_type\": \"package\"\n            }\n        ]\n    }\n    skillB = CodeSkill(**skillB_json)\n    skillB.skill_metadata = BaseSkillMetadata()\n\n    skillC_json = {\n        \"skill_name\": \"data_statistics\",\n        \"skill_description\": \"This skill calculates the average value of the input data. It provides a basic statistical overview of the dataset.\",\n        \"skill_tags\": [\"statistics\", \"average\", \"data\"],\n        \"skill_usage_example\": \"data_statistics(input_data)\",\n        \"skill_program_language\": \"python\",\n        \"skill_code\": \"\"\"\n        def data_statistics(data):\n            \\\"\\\"\\\"Calculate the average of the data.\\\"\\\"\\\"\n            return sum(data) / len(data)\n        \"\"\",\n        \"skill_parameters\": [\n            {\n                \"param_name\": \"data\",\n                \"param_type\": \"array\",\n                \"param_description\": \"The input data for which the average needs to be calculated. It should be a list of numerical values.\",\n                \"param_required\": True\n            }\n        ],\n        \"skill_return\": {\n            \"param_name\": \"average\",\n            \"param_type\": \"float\",\n            \"param_description\": \"The average value of the input data.\"\n        },\n        \"skill_dependencies\": None\n    }\n    skillC = CodeSkill(**skillC_json)\n    skillC.skill_metadata = BaseSkillMetadata()\n    return skillA, skillB, skillC\n</pre> def create_combine_testcase():     skillA_json = {         \"skill_name\": \"data_cleaning\",         \"skill_description\": \"This skill is responsible for cleaning the input data by removing empty values. It provides a simple way to preprocess data and make it ready for further analysis or visualization.\",         \"skill_tags\": [\"cleaning\", \"preprocessing\", \"data\"],         \"skill_usage_example\": \"data_cleaning(input_data)\",         \"skill_program_language\": \"python\",         \"skill_code\": \"\"\" def data_cleaning(data):     \\\"\\\"\\\"Clean the data by removing empty values.\\\"\\\"\\\"     return [item for item in data if item is not None] \"\"\",         \"skill_parameters\": [             {                 \"param_name\": \"data\",                 \"param_type\": \"array\",                 \"param_description\": \"The input data that needs cleaning. It should be a list of values.\",                 \"param_required\": True             }         ],         \"skill_return\": {             \"param_name\": \"cleaned_data\",             \"param_type\": \"array\",             \"param_description\": \"The cleaned data after removing empty values.\"         },         \"skill_dependencies\": None     }     skillA = CodeSkill(**skillA_json)     skillA.skill_metadata = BaseSkillMetadata()      skillB_json = {         \"skill_name\": \"data_visualization\",         \"skill_description\": \"This skill is responsible for visualizing the input data by generating a bar chart. It helps in understanding the data distribution and patterns.\",         \"skill_tags\": [\"visualization\", \"chart\", \"data\"],         \"skill_usage_example\": \"data_visualization(input_data)\",         \"skill_program_language\": \"python\",         \"skill_code\": \"\"\"         import matplotlib.pyplot as plt          def data_visualization(data):             \\\"\\\"\\\"Visualize the data using a bar chart.\\\"\\\"\\\"             plt.bar(range(len(data)), data)             plt.show()         \"\"\",         \"skill_parameters\": [             {                 \"param_name\": \"data\",                 \"param_type\": \"array\",                 \"param_description\": \"The input data that needs to be visualized. It should be a list of values.\",                 \"param_required\": True             }         ],         \"skill_return\": None,         \"skill_dependencies\": [             {                 \"dependency_name\": \"matplotlib\",                 \"dependency_version\": \"3.4.3\",                 \"dependency_type\": \"package\"             }         ]     }     skillB = CodeSkill(**skillB_json)     skillB.skill_metadata = BaseSkillMetadata()      skillC_json = {         \"skill_name\": \"data_statistics\",         \"skill_description\": \"This skill calculates the average value of the input data. It provides a basic statistical overview of the dataset.\",         \"skill_tags\": [\"statistics\", \"average\", \"data\"],         \"skill_usage_example\": \"data_statistics(input_data)\",         \"skill_program_language\": \"python\",         \"skill_code\": \"\"\"         def data_statistics(data):             \\\"\\\"\\\"Calculate the average of the data.\\\"\\\"\\\"             return sum(data) / len(data)         \"\"\",         \"skill_parameters\": [             {                 \"param_name\": \"data\",                 \"param_type\": \"array\",                 \"param_description\": \"The input data for which the average needs to be calculated. It should be a list of numerical values.\",                 \"param_required\": True             }         ],         \"skill_return\": {             \"param_name\": \"average\",             \"param_type\": \"float\",             \"param_description\": \"The average value of the input data.\"         },         \"skill_dependencies\": None     }     skillC = CodeSkill(**skillC_json)     skillC.skill_metadata = BaseSkillMetadata()     return skillA, skillB, skillC In\u00a0[11]: Copied! <pre>skillA, skillB, skillC = create_combine_testcase()\n</pre> skillA, skillB, skillC = create_combine_testcase() In\u00a0[12]: Copied! <pre>skillA.show()\n</pre> skillA.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_cleaning                                                                                             \n \u2022 Description: This skill is responsible for cleaning the input data by removing empty values. It provides a      \n   simple way to preprocess data and make it ready for further analysis or visualization.                          \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n data_cleaning(input_data)                                                                                         \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input data that needs cleaning. It should be a list of values.                             \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 cleaned_data (array): The cleaned data after removing empty values.                                          \n</pre> In\u00a0[13]: Copied! <pre>skillB.show()\n</pre> skillB.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_visualization                                                                                        \n \u2022 Description: This skill is responsible for visualizing the input data by generating a bar chart. It helps in    \n   understanding the data distribution and patterns.                                                               \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n data_visualization(input_data)                                                                                    \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input data that needs to be visualized. It should be a list of values.                     \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n</pre> In\u00a0[14]: Copied! <pre>skillC.show()\n</pre> skillC.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_statistics                                                                                           \n \u2022 Description: This skill calculates the average value of the input data. It provides a basic statistical overview\n   of the dataset.                                                                                                 \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n data_statistics(input_data)                                                                                       \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input data for which the average needs to be calculated. It should be a list of numerical  \n      values.                                                                                                      \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 average (float): The average value of the input data.                                                        \n</pre> In\u00a0[15]: Copied! <pre>chained_skill = skillA + skillB &gt; \"I have a dataset with empty values. First, I want to clean the data by removing the empty values, then visualize it using a bar chart.\"\n</pre> chained_skill = skillA + skillB &gt; \"I have a dataset with empty values. First, I want to clean the data by removing the empty values, then visualize it using a bar chart.\" <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/02f47717-\ndc2e-4908-af17-7403f9732e2d?poll=true                                                                              \n</pre> In\u00a0[16]: Copied! <pre>chained_skill.show()\n</pre> chained_skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: clean_and_visualize_data                                                                                  \n \u2022 Description: This skill is responsible for cleaning the input data by removing empty values and then visualizing\n   it by generating a bar chart. It provides a simple way to preprocess and understand data.                       \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n clean_and_visualize_data(input_data)                                                                              \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input data that needs cleaning and visualization. It should be a list of values.           \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 cleaned_data (array): The cleaned data after removing empty values.                                          \n</pre> In\u00a0[17]: Copied! <pre>internal_logic_combined_skill = skillA + skillB + skillC &gt; \"I have a dataset. I want to both visualize the data using a bar chart and calculate its average simultaneously\"\n</pre> internal_logic_combined_skill = skillA + skillB + skillC &gt; \"I have a dataset. I want to both visualize the data using a bar chart and calculate its average simultaneously\" <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/6c71660e-\nf9fc-441c-a399-589ba14ef6d7?poll=true                                                                              \n</pre> In\u00a0[18]: Copied! <pre>internal_logic_combined_skill.show()\n</pre> internal_logic_combined_skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_analysis                                                                                             \n \u2022 Description: This skill is responsible for cleaning the input data, visualizing it by generating a bar chart,   \n   and calculating its average. It provides a comprehensive way to preprocess, understand, and analyze data.       \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n data_analysis(input_data)                                                                                         \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input data that needs cleaning, visualization, and average calculation. It should be a list\n      of values.                                                                                                   \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 cleaned_data (array): The cleaned data after removing empty values.                                          \n    \u2022 visualization (object): The visualization of the data.                                                       \n    \u2022 average (float): The average value of the input data.                                                        \n</pre> In\u00a0[19]: Copied! <pre>parallel_combined = skillA + skillB + skillC &gt; \"I have a dataset. I want to both visualize the data using a bar chart and calculate its average simultaneously\"\n</pre> parallel_combined = skillA + skillB + skillC &gt; \"I have a dataset. I want to both visualize the data using a bar chart and calculate its average simultaneously\" <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/4e02c38f-\nebda-4e18-949a-bc8667454564?poll=true                                                                              \n</pre> In\u00a0[20]: Copied! <pre>parallel_combined.show()\n</pre> parallel_combined.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: data_analysis                                                                                             \n \u2022 Description: This skill is responsible for cleaning the input data, visualizing it by generating a bar chart,   \n   and calculating its average. It provides a comprehensive way to preprocess, understand, and analyze data.       \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n data_analysis(input_data)                                                                                         \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 data (array): The input data that needs cleaning, visualization, and average calculation. It should be a list\n      of values.                                                                                                   \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 cleaned_data (array): The cleaned data after removing empty values.                                          \n    \u2022 visualization (object): The visualization of the data.                                                       \n    \u2022 average (float): The average value of the input data.                                                        \n</pre> In\u00a0[21]: Copied! <pre>def create_complex_skill():\n    skill_json = {\n        'skill_name': 'data_visualization_and_statistics',\n        'skill_description': 'This skill is responsible for visualizing the input data using a bar chart and calculating its average simultaneously. It provides a comprehensive overview of the dataset.',\n        'skill_metadata': {'created_at': '2023-09-30 00:26:46', 'author': 'gongjunmin', 'updated_at': '2023-09-30 00:26:46', 'usage_count': 0, 'version': '1.0.0', 'additional_kwargs': {}},\n        'skill_tags': ['data visualization', 'statistics', 'bar chart'],\n        'skill_usage_example': 'data_visualization_and_statistics(input_data)',\n        'skill_program_language': 'python',\n        'skill_code': 'def data_visualization_and_statistics(input_data):\\n    visualize_data(input_data)\\n    calculate_average(input_data)',\n        'skill_parameters': [\n            {'param_name': 'input_data', 'param_type': 'any', 'param_description': 'The input dataset to be visualized and analyzed.', 'param_required': True, 'param_default': None}\n        ],\n        'skill_return': None,\n        'skill_dependencies': [\n            {'dependency_name': 'visualize_data', 'dependency_version': '', 'dependency_type': 'built-in'},\n            {'dependency_name': 'calculate_average', 'dependency_version': '', 'dependency_type': 'built-in'}\n        ]\n    }\n    skill = CodeSkill(**skill_json)\n    skill.skill_metadata = BaseSkillMetadata()\n    skill.conversation_history = []\n    return skill\n</pre> def create_complex_skill():     skill_json = {         'skill_name': 'data_visualization_and_statistics',         'skill_description': 'This skill is responsible for visualizing the input data using a bar chart and calculating its average simultaneously. It provides a comprehensive overview of the dataset.',         'skill_metadata': {'created_at': '2023-09-30 00:26:46', 'author': 'gongjunmin', 'updated_at': '2023-09-30 00:26:46', 'usage_count': 0, 'version': '1.0.0', 'additional_kwargs': {}},         'skill_tags': ['data visualization', 'statistics', 'bar chart'],         'skill_usage_example': 'data_visualization_and_statistics(input_data)',         'skill_program_language': 'python',         'skill_code': 'def data_visualization_and_statistics(input_data):\\n    visualize_data(input_data)\\n    calculate_average(input_data)',         'skill_parameters': [             {'param_name': 'input_data', 'param_type': 'any', 'param_description': 'The input dataset to be visualized and analyzed.', 'param_required': True, 'param_default': None}         ],         'skill_return': None,         'skill_dependencies': [             {'dependency_name': 'visualize_data', 'dependency_version': '', 'dependency_type': 'built-in'},             {'dependency_name': 'calculate_average', 'dependency_version': '', 'dependency_type': 'built-in'}         ]     }     skill = CodeSkill(**skill_json)     skill.skill_metadata = BaseSkillMetadata()     skill.conversation_history = []     return skill  In\u00a0[22]: Copied! <pre>skill = create_complex_skill()\n</pre> skill = create_complex_skill() In\u00a0[23]: Copied! <pre>decomposed_skills = skill &lt; \"I want to decompose this skill into two skills: one for visualizing the data using a bar chart, and one for calculating the average.\"\n</pre> decomposed_skills = skill &lt; \"I want to decompose this skill into two skills: one for visualizing the data using a bar chart, and one for calculating the average.\" <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/b0de9ace-\n2d39-4f25-80c8-19b8c36ec3bc?poll=true                                                                              \n</pre> In\u00a0[24]: Copied! <pre>len(decomposed_skills)\n</pre> len(decomposed_skills) Out[24]: <pre>2</pre> In\u00a0[25]: Copied! <pre>for decomposed_skill in decomposed_skills:\n    decomposed_skill.show()\n</pre> for decomposed_skill in decomposed_skills:     decomposed_skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: visualize_data                                                                                            \n \u2022 Description: This skill is responsible for visualizing the input data using a bar chart. It provides a visual   \n   overview of the dataset.                                                                                        \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n visualize_data(input_data)                                                                                        \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 input_data (any): The input dataset to be visualized.                                                        \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n</pre> <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: calculate_average                                                                                         \n \u2022 Description: This skill is responsible for calculating the average of the input data. It provides a statistical \n   analysis of the dataset.                                                                                        \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n average = calculate_average(input_data)                                                                           \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 input_data (any): The input dataset to be analyzed.                                                          \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 average (float): The average of the input data.                                                              \n</pre>"},{"location":"examples/06_skills_refactor/#overloaded-operators","title":"Overloaded Operators:\u00b6","text":"<p>Modify and refine skills using operator overloading.</p> <ol> <li>Combining Skills: Utilize the <code>+</code> operator to chain or execute skills in parallel, detailing the coordination with the <code>&gt;</code> operator.</li> </ol> <pre>new_skill = skillA + skillB &gt; \"Explanation of how skills A and B operate together\"\n</pre> <ol> <li><p>Refactoring Skills: Employ the <code>&gt;</code> operator to enhance or modify existing skills.</p> <pre>refactored_skill = skill &gt; \"Descriptive alterations or enhancements\"\n</pre> </li> <li><p>Decomposing Skills: Use the <code>&lt;</code> operator to break down a skill into simpler components.</p> <pre>simpler_skills = skill &lt; \"Description of how the skill should be decomposed\"\n</pre> </li> </ol>"},{"location":"examples/06_skills_refactor/#notes","title":"Notes:\u00b6","text":"<ul> <li>Ensure accurate descriptions when using overloaded operators to ensure skill modifications are clear and understandable.</li> <li>Validate skills with <code>test</code> method to ensure functionality post-modification.</li> </ul>"},{"location":"examples/06_skills_refactor/#1-refactor-case-finetune-a-skill-object","title":"1 Refactor Case: Finetune a Skill Object\u00b6","text":"<ul> <li>add input parameter</li> <li>add output</li> <li>change logic</li> </ul>"},{"location":"examples/06_skills_refactor/#2-refactor-case-2-combine-skills-into-one","title":"2 Refactor Case 2: combine skills into one\u00b6","text":"<ul> <li>chain skills</li> <li>internal logic combine</li> <li>parallel combine</li> </ul>"},{"location":"examples/06_skills_refactor/#2-refactor-case-3-decompose-one-skill-into-multiple","title":"2 Refactor Case 3: decompose one skill into multiple\u00b6","text":"<ul> <li>decompose</li> </ul>"},{"location":"examples/07_skills_auto_optimize/","title":"07 Skills Auto Optimize","text":"In\u00a0[1]: Copied! <pre>from creator import create, search, save\n</pre> from creator import create, search, save In\u00a0[2]: Copied! <pre>skills = search(\"solver of 24 game\")\nif skills:\n    game_of_24_skill = skills[0]\n</pre> skills = search(\"solver of 24 game\") if skills:     game_of_24_skill = skills[0] <pre>\n\u258c loading vector database...                                                                                     \n</pre> In\u00a0[3]: Copied! <pre>game_of_24_skill.show()\n</pre> game_of_24_skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: solve_game_of_24                                                                                          \n \u2022 Description: This skill solves the Game of 24 by finding a way to combine four given numbers using basic        \n   arithmetic operations to obtain the result of 24.                                                               \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n numbers = [1, 1, 2, 12]                                                                                           \n solution = solve_game_of_24(numbers)                                                                              \n print(solution)                                                                                                   \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 numbers (array): An array of four numbers to be used in the Game of 24.                                      \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 solution (string): The solution expression that equals 24, or 'No solution found' if no solution is found.   \n</pre> In\u00a0[4]: Copied! <pre>game_of_24_skill.show_code()\n</pre> game_of_24_skill.show_code() <pre>                                                                                                                   \n from itertools import permutations                                                                                \n                                                                                                                   \n                                                                                                                   \n def solve_game_of_24(numbers):                                                                                    \n     for permutation in permutations(numbers):                                                                     \n         a, b, c, d = permutation                                                                                  \n         # Try all possible combinations of arithmetic operations                                                  \n         for ops in ['+', '-', '*', '/']:                                                                          \n             expression = f'(({a} {ops[0]} {b}) {ops[1]} {c}) {ops[2]} {d}'                                        \n             try:                                                                                                  \n                 result = eval(expression)                                                                         \n                 if result == 24:                                                                                  \n                     return expression                                                                             \n             except ZeroDivisionError:                                                                             \n                 pass                                                                                              \n     return 'No solution found'                                                                                    \n                                                                                                                   \n</pre> In\u00a0[5]: Copied! <pre>optimized_skill = game_of_24_skill.auto_optimize()\n</pre> optimized_skill = game_of_24_skill.auto_optimize() <pre>\n\u258c Installing dependencies                                                                                        \n</pre> <pre>                                                                                                                   \n pip show itertools || pip install \"itertools\"                                                                     \n                                                                                                                   \n</pre> <pre>\n\u258c Install dependencies result: {'status': 'success', 'stdout': '', 'stderr': '\\x1b[33mWARNING: Package(s) not    \n\u258c found: itertools\\x1b[0m\\x1b[33m\\n\\x1b[0m\\x1b[31mERROR: Could not find a version that satisfies the requirement \n\u258c itertools (from versions: none)\\x1b[0m\\x1b[31m\\n'}                                                             \n</pre> <pre>Output()</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>\n\u258c Auto Refine Skill 1/3                                                                                          \n</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/61f07104-\n29a1-420c-b831-cbda8df3668e?poll=true                                                                              \n</pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/7f305c8e-\n9bb6-45fc-9035-5af496184866?poll=true                                                                              \n</pre> In\u00a0[6]: Copied! <pre>optimized_skill.show()\n</pre> optimized_skill.show() <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: solve_game_of_24                                                                                          \n \u2022 Description: This skill solves the Game of 24 by finding a way to combine four given numbers using basic        \n   arithmetic operations to obtain the result of 24.                                                               \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n numbers = [1, 1, 2, 12]                                                                                           \n solution = solve_game_of_24(numbers)                                                                              \n print(solution)                                                                                                   \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n    \u2022 numbers (array): An array of four numbers to be used in the Game of 24.                                      \n       \u2022 Required: True                                                                                            \n \u2022 Returns:                                                                                                        \n    \u2022 solution (string): The solution expression that equals 24, or 'No solution found' if no solution is found.   \n</pre> In\u00a0[7]: Copied! <pre>optimized_skill.show_code()\n</pre> optimized_skill.show_code() <pre>                                                                                                                   \n from itertools import permutations, product                                                                       \n                                                                                                                   \n                                                                                                                   \n def solve_game_of_24(numbers):                                                                                    \n     for permutation in permutations(numbers):                                                                     \n         a, b, c, d = permutation                                                                                  \n         # Try all possible combinations of arithmetic operations                                                  \n         for ops in product(['+', '-', '*', '/'], repeat=3):                                                       \n             expression = f'(({a} {ops[0]} {b}) {ops[1]} {c}) {ops[2]} {d}'                                        \n             try:                                                                                                  \n                 result = eval(expression)                                                                         \n                 if result == 24:                                                                                  \n                     return expression                                                                             \n             except ZeroDivisionError:                                                                             \n                 pass                                                                                              \n     return 'No solution found'                                                                                    \n                                                                                                                   \n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/07_skills_auto_optimize/#optional-features-auto-optimize-a-skill","title":"* Optional Features: Auto Optimize a Skill\u00b6","text":"<p>leveraging the <code>code_test_agent</code> and <code>refactor_agent</code> functions, we can automatically optimize a skill by running the following code:</p> <pre>def auto_optimize(skill, retry_times=3):\n    skill = self.model_copy(deep=True)\n    refined = False\n    for i in range(retry_times):\n        if skill.test_summary is None:\n            test_summary = skill.test()\n            if test_summary is None:\n                print(\"&gt; Skill test failed, cannot auto optimize\", print_type=\"markdown\")\n                return skill\n\n        all_passed = all(test_case.is_passed for test_case in test_summary.test_cases)\n        if all_passed and refined:\n            return skill\n        print(f\"&gt; Auto Refine Skill {i+1}/{retry_times}\", print_type=\"markdown\")\n        skill = skill &gt; \"I have tested the skill, but it failed, please refine it.\"\n        if all_passed:\n            skill.test_summary = test_summary\n        refined = True\n    return skill\n</pre> <p>Recommend Model: <code>gpt-4</code></p>"},{"location":"examples/08_creator_agent/","title":"08 Creator Agent","text":"In\u00a0[1]: Copied! <pre>from creator.agents import create_creator_agent\nfrom creator import config\n</pre> from creator.agents import create_creator_agent from creator import config In\u00a0[2]: Copied! <pre>open_creator_agent = create_creator_agent(config)\n</pre> open_creator_agent = create_creator_agent(config) In\u00a0[3]: Copied! <pre>messages = [\n    {\n        \"role\": \"user\",\n        \"content\": \"what can you do for me? output in markdown table\",\n    }\n]\n</pre> messages = [     {         \"role\": \"user\",         \"content\": \"what can you do for me? output in markdown table\",     } ] In\u00a0[4]: Copied! <pre>messages = open_creator_agent.run({\"messages\": messages})\n</pre> messages = open_creator_agent.run({\"messages\": messages}) <pre>Output()</pre> <pre></pre> <pre></pre> In\u00a0[5]: Copied! <pre>messages.append(\n    {\n        \"role\": \"user\",\n        \"content\": \"create a skill that request is to solve 8 * 8 matrix random maze, and save it\"\n    }\n)\n</pre> messages.append(     {         \"role\": \"user\",         \"content\": \"create a skill that request is to solve 8 * 8 matrix random maze, and save it\"     } ) In\u00a0[6]: Copied! <pre>messages = open_creator_agent.run({\"messages\": messages})\n</pre> messages = open_creator_agent.run({\"messages\": messages}) <pre>Output()</pre> <pre>Output()</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> <pre>Langsmith Run URL:                                                                                                 \nhttp://localhost/o/00000000-0000-0000-0000-000000000000/projects/p/856d5024-48fe-4a9c-b1f9-5236f8d3aebd/r/a790ec8f-\n71ad-4de2-b81c-74f1575ebb0b?poll=true                                                                              \n</pre> <pre>Output()</pre> <pre>Output()</pre> <pre>\n\u258c saved to /Users/gongjunmin/.cache/open_creator/skill_library/solve_maze                                        \n</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre> In\u00a0[7]: Copied! <pre>messages.append(\n    {\n        \"role\": \"user\",\n        \"content\": \"try to search this skill and show skill and skill code\"\n    }\n)\n</pre> messages.append(     {         \"role\": \"user\",         \"content\": \"try to search this skill and show skill and skill code\"     } ) In\u00a0[8]: Copied! <pre>messages = open_creator_agent.run({\"messages\": messages})\n</pre> messages = open_creator_agent.run({\"messages\": messages}) <pre>Output()</pre> <pre>Output()</pre> <pre>\n\u258c loading vector database...                                                                                     \n</pre> <pre>\n                                                  Skill Details:                                                   \n\n \u2022 Name: solve_random_maze                                                                                         \n \u2022 Description: This skill generates a random 8x8 maze and finds a solution for it. The maze and its solution are  \n   represented as 2D arrays, where 1 represents a path and 0 represents a wall or an unvisited cell. The skill uses\n   a depth-first search algorithm to find a path from the top-left corner to the bottom-right corner of the maze.  \n \u2022 Version: 1.0.0                                                                                                  \n \u2022 Usage:                                                                                                          \n\n                                                                                                                   \n maze, solution = solve_random_maze()                                                                              \n print('Maze:')                                                                                                    \n print(maze)                                                                                                       \n print('Solution:')                                                                                                \n print(solution)                                                                                                   \n                                                                                                                   \n\n \u2022 Parameters:                                                                                                     \n \u2022 Returns:                                                                                                        \n</pre> <pre>                                                                                                                   \n import numpy as np                                                                                                \n                                                                                                                   \n def solve_random_maze():                                                                                          \n     def solve_maze(maze, x, y, solution):                                                                         \n         if x == len(maze) - 1 and y == len(maze[0]) - 1:                                                          \n             solution[x][y] = 1                                                                                    \n             return True                                                                                           \n         if x &gt;= 0 and x &lt; len(maze) and y &gt;= 0 and y &lt; len(maze[0]) and maze[x][y] == 0:                          \n             solution[x][y] = 1                                                                                    \n             if solve_maze(maze, x + 1, y, solution):                                                              \n                 return True                                                                                       \n             if solve_maze(maze, x, y + 1, solution):                                                              \n                 return True                                                                                       \n             solution[x][y] = 0                                                                                    \n             return False                                                                                          \n         return False                                                                                              \n                                                                                                                   \n     while True:                                                                                                   \n         maze = np.random.choice([0, 1], size=(8, 8))                                                              \n         maze[0, 0] = 0                                                                                            \n         maze[7, 7] = 0                                                                                            \n         solution = np.zeros_like(maze)                                                                            \n         if solve_maze(maze, 0, 0, solution):                                                                      \n             return maze, solution                                                                                 \n                                                                                                                   \n</pre> <pre></pre> <pre></pre> <pre>Output()</pre> <pre></pre> <pre></pre>"},{"location":"examples/08_creator_agent/#optional-features-auto-optimize-a-skill","title":"* Optional Features: Auto Optimize a Skill\u00b6","text":"<p>creator agent can use open-creator API to <code>create</code>, <code>search</code>, <code>save</code> skills</p>"},{"location":"examples/09_memgpt/","title":"09 memgpt","text":"In\u00a0[\u00a0]: Copied! <pre>from creator import config\nfrom creator.memgpt import create_memgpt\n</pre> from creator import config from creator.memgpt import create_memgpt In\u00a0[\u00a0]: Copied! <pre>session_id = \"test_session\"\nconfig.memgpt_config.session_id = session_id\nmemgpt = create_memgpt(config)\n</pre> session_id = \"test_session\" config.memgpt_config.session_id = session_id memgpt = create_memgpt(config) In\u00a0[\u00a0]: Copied! <pre>memgpt.memory_manager.clear()\n</pre> memgpt.memory_manager.clear() In\u00a0[\u00a0]: Copied! <pre>memgpt.memory_manager.messages\n</pre> memgpt.memory_manager.messages In\u00a0[\u00a0]: Copied! <pre>while 1:\n    user_request = input(\"&gt; \")\n    if user_request.startswith(\"/exit\"):\n        break\n    session_id = await memgpt.arun({\"user_request\": user_request, \"session_id\": session_id})\n</pre>  while 1:     user_request = input(\"&gt; \")     if user_request.startswith(\"/exit\"):         break     session_id = await memgpt.arun({\"user_request\": user_request, \"session_id\": session_id})"},{"location":"examples/data/create_api/","title":"Create api","text":""},{"location":"examples/data/create_api/#open-creator-api-documentation","title":"Open-Creator API Documentation","text":""},{"location":"examples/data/create_api/#function-create","title":"Function: <code>create</code>","text":"<p>Generates a <code>CodeSkill</code> instance using different input sources.</p>"},{"location":"examples/data/create_api/#parameters","title":"Parameters:","text":"<ul> <li><code>request</code>: String detailing the skill functionality.</li> <li><code>messages</code> or <code>messages_json_path</code>: Messages as a list of dictionaries or a path to a JSON file containing messages.</li> <li><code>file_content</code> or <code>file_path</code>: String of file content or path to a code/API doc file.</li> <li><code>skill_path</code> or <code>skill_json_path</code>: Directory path with skill name as stem or file path with <code>skill.json</code> as stem.</li> <li><code>huggingface_repo_id</code>: Identifier for a Huggingface repository.</li> <li><code>huggingface_skill_path</code>: Path to the skill within the Huggingface repository.</li> </ul>"},{"location":"examples/data/create_api/#returns","title":"Returns:","text":"<ul> <li><code>CodeSkill</code>: The created skill.</li> </ul>"},{"location":"examples/data/create_api/#installation","title":"Installation","text":"<p><pre><code>pip install -U open-creator\n</code></pre> open-creator: \"^0.1.2\"</p>"},{"location":"examples/data/create_api/#usage","title":"Usage:","text":"<pre><code>from creator import create\n</code></pre>"},{"location":"examples/data/create_api/#notes","title":"Notes:","text":"<ul> <li>Ensure to provide accurate and accessible file paths.</li> <li>At least one parameter must be specified to generate a skill.</li> <li>Parameters\u2019 functionality does not overlap; specify the most relevant one for clarity.</li> <li>Use absolute paths where possible to avoid relative path issues.</li> <li>Ensure the repository ID and skill path are accurate and that you have the necessary access permissions to retrieve the skill from the repository.</li> </ul>"}]}